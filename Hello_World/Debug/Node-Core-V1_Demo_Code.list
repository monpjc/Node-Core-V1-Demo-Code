
Node-Core-V1_Demo_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d1c  08007d1c  0000915c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d1c  08007d1c  00008d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d24  08007d24  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d28  08007d28  00008d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08007d2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  2000015c  08007e88  0000915c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eac  08007e88  00009eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3b6  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd9  00000000  00000000  00017542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0001a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d1  00000000  00000000  0001ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd30  00000000  00000000  0001b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce7  00000000  00000000  0003b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1d7d  00000000  00000000  0004c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fde7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  000fdec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00101338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c68 	.word	0x08007c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000160 	.word	0x20000160
 800020c:	08007c68 	.word	0x08007c68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 f9db 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f845 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8ad 	bl	800070c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b2:	f006 f91b 	bl	80067ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int i;
  int count = 1000000;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <main+0x8c>)
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	481c      	ldr	r0, [pc, #112]	@ (8000630 <main+0x90>)
 80005c0:	f000 fcea 	bl	8000f98 <HAL_GPIO_WritePin>
  	  for(i = 0; i < (count/2); i++);
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005c8:	e002      	b.n	80005d0 <main+0x30>
 80005ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005cc:	3301      	adds	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d2:	0fda      	lsrs	r2, r3, #31
 80005d4:	4413      	add	r3, r2
 80005d6:	105b      	asrs	r3, r3, #1
 80005d8:	461a      	mov	r2, r3
 80005da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005dc:	4293      	cmp	r3, r2
 80005de:	dbf4      	blt.n	80005ca <main+0x2a>

  	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	4812      	ldr	r0, [pc, #72]	@ (8000630 <main+0x90>)
 80005e6:	f000 fcd7 	bl	8000f98 <HAL_GPIO_WritePin>
  	  for(i = 0; i < count*2; i++);
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005ee:	e002      	b.n	80005f6 <main+0x56>
 80005f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005f2:	3301      	adds	r3, #1
 80005f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf7      	blt.n	80005f0 <main+0x50>

  	  bufLen = snprintf(logBuf, 32, "Hello World\r\n");
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0x94>)
 8000604:	2120      	movs	r1, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fe7a 	bl	8007300 <sniprintf>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  	  HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fa16 	bl	8000a44 <HAL_Delay>
  	  CDC_Transmit_FS((uint8_t *) logBuf, bufLen);
 8000618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f9a0 	bl	8006968 <CDC_Transmit_FS>
  	  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, 0);
 8000628:	e7c7      	b.n	80005ba <main+0x1a>
 800062a:	bf00      	nop
 800062c:	000f4240 	.word	0x000f4240
 8000630:	40020000 	.word	0x40020000
 8000634:	08007c80 	.word	0x08007c80

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	@ 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fe8e 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ac:	2360      	movs	r3, #96	@ 0x60
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fae3 	bl	8002c8c <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006cc:	f000 f86e 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2103      	movs	r1, #3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 ff09 	bl	8002504 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f8:	f000 f858 	bl	80007ac <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	@ 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <MX_GPIO_Init+0x98>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2101      	movs	r1, #1
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0x9c>)
 800077c:	f000 fc0c 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_GPIO_Init+0x9c>)
 8000798:	f000 fa8a 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f8d1 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	@ (8000878 <OTG_FS_IRQHandler+0x10>)
 800086e:	f000 fcf7 	bl	8001260 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001660 	.word	0x20001660

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f006 fd64 	bl	8007378 <__errno>
 80008b0:	4603      	mov	r3, r0
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <_sbrk+0x64>)
 80008cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20040000 	.word	0x20040000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	20000178 	.word	0x20000178
 80008e4:	20001eb0 	.word	0x20001eb0

080008e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000910:	f7ff ffea 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	@ (800094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	@ (8000958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f006 fd23 	bl	8007384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fe2f 	bl	80005a0 <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000944:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000950:	08007d2c 	.word	0x08007d2c
  ldr r2, =_sbss
 8000954:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000958:	20001eac 	.word	0x20001eac

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <HAL_Init+0x40>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_Init+0x40>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x40>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f94f 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff ff10 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f967 	bl	8000c96 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f92f 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	2000017c 	.word	0x2000017c

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2000017c 	.word	0x2000017c

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff3e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff31 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa2 	bl	8000be8 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e14d      	b.n	8000f68 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 813c 	bne.w	8000f62 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8096 	beq.w	8000f62 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b51      	ldr	r3, [pc, #324]	@ (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a50      	ldr	r2, [pc, #320]	@ (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b4e      	ldr	r3, [pc, #312]	@ (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <HAL_GPIO_Init+0x2d4>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a43      	ldr	r2, [pc, #268]	@ (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x1ea>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a42      	ldr	r2, [pc, #264]	@ (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x1e6>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a41      	ldr	r2, [pc, #260]	@ (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	@ (8000f84 <HAL_GPIO_Init+0x2d4>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ede:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f08:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f aeae 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40013c00 	.word	0x40013c00

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb4:	e003      	b.n	8000fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af02      	add	r7, sp, #8
 8000fd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e108      	b.n	80011ee <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 fe10 	bl	8006c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100a:	d102      	bne.n	8001012 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f002 f9d3 	bl	80033c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7c1a      	ldrb	r2, [r3, #16]
 8001024:	f88d 2000 	strb.w	r2, [sp]
 8001028:	3304      	adds	r3, #4
 800102a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102c:	f002 f8b2 	bl	8003194 <USB_CoreInit>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2202      	movs	r2, #2
 800103a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e0d5      	b.n	80011ee <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f002 f9cb 	bl	80033e4 <USB_SetCurrentMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0c6      	b.n	80011ee <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e04a      	b.n	80010fc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3315      	adds	r3, #21
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	3314      	adds	r3, #20
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	b298      	uxth	r0, r3
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	332e      	adds	r3, #46	@ 0x2e
 80010a2:	4602      	mov	r2, r0
 80010a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3318      	adds	r3, #24
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	331c      	adds	r3, #28
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3320      	adds	r3, #32
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3324      	adds	r3, #36	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3301      	adds	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3af      	bcc.n	8001066 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e044      	b.n	8001196 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3b5      	bcc.n	800110c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7c1a      	ldrb	r2, [r3, #16]
 80011a8:	f88d 2000 	strb.w	r2, [sp]
 80011ac:	3304      	adds	r3, #4
 80011ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b0:	f002 f964 	bl	800347c <USB_DevInit>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e013      	b.n	80011ee <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b1b      	ldrb	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f001 f96d 	bl	80024bc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f99b 	bl	8004522 <USB_DevDisconnect>

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_PCD_Start+0x1c>
 800120e:	2302      	movs	r3, #2
 8001210:	e022      	b.n	8001258 <HAL_PCD_Start+0x62>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800122a:	2b01      	cmp	r3, #1
 800122c:	d105      	bne.n	800123a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001232:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 f8ae 	bl	80033a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f949 	bl	80044e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08d      	sub	sp, #52	@ 0x34
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fa07 	bl	800468a <USB_GetMode>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 84b9 	bne.w	8001bf6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 f96b 	bl	8004564 <USB_ReadInterrupts>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 84af 	beq.w	8001bf4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f958 	bl	8004564 <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d107      	bne.n	80012ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f002 0202 	and.w	r2, r2, #2
 80012cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f946 	bl	8004564 <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d161      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0210 	bic.w	r2, r2, #16
 80012f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 020f 	and.w	r2, r3, #15
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	3304      	adds	r3, #4
 8001310:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	0c5b      	lsrs	r3, r3, #17
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	2b02      	cmp	r3, #2
 800131c:	d124      	bne.n	8001368 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d035      	beq.n	8001396 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	6a38      	ldr	r0, [r7, #32]
 800133e:	f002 ff7d 	bl	800423c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134e:	441a      	add	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001360:	441a      	add	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	e016      	b.n	8001396 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	0c5b      	lsrs	r3, r3, #17
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	2b06      	cmp	r3, #6
 8001372:	d110      	bne.n	8001396 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800137a:	2208      	movs	r2, #8
 800137c:	4619      	mov	r1, r3
 800137e:	6a38      	ldr	r0, [r7, #32]
 8001380:	f002 ff5c 	bl	800423c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001390:	441a      	add	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0210 	orr.w	r2, r2, #16
 80013a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 f8da 	bl	8004564 <USB_ReadInterrupts>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013ba:	f040 80a7 	bne.w	800150c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f8df 	bl	800458a <USB_ReadDevAllOutEpInterrupt>
 80013cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013ce:	e099      	b.n	8001504 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 808e 	beq.w	80014f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f903 	bl	80045f2 <USB_ReadDevOutEPInterrupt>
 80013ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00c      	beq.n	8001412 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	4413      	add	r3, r2
 8001400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001404:	461a      	mov	r2, r3
 8001406:	2301      	movs	r3, #1
 8001408:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800140a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fecf 	bl	80021b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00c      	beq.n	8001436 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001428:	461a      	mov	r2, r3
 800142a:	2308      	movs	r3, #8
 800142c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800142e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 ffa5 	bl	8002380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	015a      	lsls	r2, r3, #5
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800144c:	461a      	mov	r2, r3
 800144e:	2310      	movs	r3, #16
 8001450:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d030      	beq.n	80014be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001464:	2b80      	cmp	r3, #128	@ 0x80
 8001466:	d109      	bne.n	800147c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800147c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2200      	movs	r2, #0
 800149e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f005 fcca 	bl	8006e40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b8:	461a      	mov	r2, r3
 80014ba:	2302      	movs	r3, #2
 80014bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d4:	461a      	mov	r2, r3
 80014d6:	2320      	movs	r3, #32
 80014d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d009      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f0:	461a      	mov	r2, r3
 80014f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	3301      	adds	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f af62 	bne.w	80013d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 f827 	bl	8004564 <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800151c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001520:	f040 80db 	bne.w	80016da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f848 	bl	80045be <USB_ReadDevAllInEpInterrupt>
 800152e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001534:	e0cd      	b.n	80016d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80c2 	beq.w	80016c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f86e 	bl	800462e <USB_ReadDevInEPInterrupt>
 8001552:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d057      	beq.n	800160e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2201      	movs	r2, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	69f9      	ldr	r1, [r7, #28]
 800157a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800157e:	4013      	ands	r3, r2
 8001580:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2301      	movs	r3, #1
 8001592:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	799b      	ldrb	r3, [r3, #6]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d132      	bne.n	8001602 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3320      	adds	r3, #32
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4403      	add	r3, r0
 80015bc:	331c      	adds	r3, #28
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4419      	add	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4403      	add	r3, r0
 80015d0:	3320      	adds	r3, #32
 80015d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d113      	bne.n	8001602 <HAL_PCD_IRQHandler+0x3a2>
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3324      	adds	r3, #36	@ 0x24
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d108      	bne.n	8001602 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015fa:	461a      	mov	r2, r3
 80015fc:	2101      	movs	r1, #1
 80015fe:	f003 f875 	bl	80046ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f005 fb9e 	bl	8006d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001624:	461a      	mov	r2, r3
 8001626:	2308      	movs	r3, #8
 8001628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2310      	movs	r3, #16
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800165c:	461a      	mov	r2, r3
 800165e:	2340      	movs	r3, #64	@ 0x40
 8001660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800166c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800166e:	6a38      	ldr	r0, [r7, #32]
 8001670:	f002 f862 	bl	8003738 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	3310      	adds	r3, #16
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	78db      	ldrb	r3, [r3, #3]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f005 fbe1 	bl	8006e64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ae:	461a      	mov	r2, r3
 80016b0:	2302      	movs	r3, #2
 80016b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fce8 	bl	8002096 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f af2e 	bne.w	8001536 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 ff40 	bl	8004564 <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016ee:	d122      	bne.n	8001736 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f005 fd5f 	bl	80071dc <HAL_PCDEx_LPM_Callback>
 800171e:	e002      	b.n	8001726 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f005 fb7f 	bl	8006e24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f002 ff12 	bl	8004564 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800174a:	d112      	bne.n	8001772 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f005 fb3b 	bl	8006dd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001770:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fef4 	bl	8004564 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001786:	d121      	bne.n	80017cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001796:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d111      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	f003 020f 	and.w	r2, r3, #15
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f005 fd0c 	bl	80071dc <HAL_PCDEx_LPM_Callback>
 80017c4:	e002      	b.n	80017cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f005 fb06 	bl	8006dd8 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fec7 	bl	8004564 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e0:	f040 80b7 	bne.w	8001952 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2110      	movs	r1, #16
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 ff9a 	bl	8003738 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001808:	e046      	b.n	8001898 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001816:	461a      	mov	r2, r3
 8001818:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800181c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800181e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800182e:	0151      	lsls	r1, r2, #5
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	440a      	add	r2, r1
 8001834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001838:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800183c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800184a:	461a      	mov	r2, r3
 800184c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001850:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001862:	0151      	lsls	r1, r2, #5
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	440a      	add	r2, r1
 8001868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800186c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001882:	0151      	lsls	r1, r2, #5
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	440a      	add	r2, r1
 8001888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800188c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001890:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	3301      	adds	r3, #1
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d3b2      	bcc.n	800180a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7bdb      	ldrb	r3, [r3, #15]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d016      	beq.n	80018ee <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d0:	f043 030b 	orr.w	r3, r3, #11
 80018d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e6:	f043 030b 	orr.w	r3, r3, #11
 80018ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ec:	e015      	b.n	800191a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001900:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001904:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001914:	f043 030b 	orr.w	r3, r3, #11
 8001918:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001928:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800192c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193c:	461a      	mov	r2, r3
 800193e:	f002 fed5 	bl	80046ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fe04 	bl	8004564 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001966:	d123      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fe9a 	bl	80046a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f001 ff57 	bl	800382a <USB_GetDevSpeed>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681c      	ldr	r4, [r3, #0]
 8001988:	f000 ffa6 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 800198c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001992:	461a      	mov	r2, r3
 8001994:	4620      	mov	r0, r4
 8001996:	f001 fc61 	bl	800325c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f005 f9fd 	bl	8006d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fdd5 	bl	8004564 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d10a      	bne.n	80019da <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f005 f9da 	bl	8006d7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 0208 	and.w	r2, r2, #8
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fdc0 	bl	8004564 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b80      	cmp	r3, #128	@ 0x80
 80019ec:	d123      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fa:	2301      	movs	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fe:	e014      	b.n	8001a2a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fb08 	bl	8002034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	3301      	adds	r3, #1
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d3e4      	bcc.n	8001a00 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fd92 	bl	8004564 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a4a:	d13c      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a50:	e02b      	b.n	8001aaa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3318      	adds	r3, #24
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d115      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da12      	bge.n	8001aa4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3317      	adds	r3, #23
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fac8 	bl	8002034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d3cd      	bcc.n	8001a52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fd4a 	bl	8004564 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ada:	d156      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae0:	e045      	b.n	8001b6e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12e      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da2b      	bge.n	8001b68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d121      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b64:	6053      	str	r3, [r2, #4]
            break;
 8001b66:	e008      	b.n	8001b7a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	461a      	mov	r2, r3
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d3b3      	bcc.n	8001ae2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fce8 	bl	8004564 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9e:	d10a      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f005 f971 	bl	8006e88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fcd2 	bl	8004564 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d115      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f005 f961 	bl	8006ea4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e000      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x996>
      return;
 8001bf4:	bf00      	nop
    }
  }
}
 8001bf6:	3734      	adds	r7, #52	@ 0x34
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}

08001bfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_PCD_SetAddress+0x1a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e012      	b.n	8001c3c <HAL_PCD_SetAddress+0x40>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fc31 	bl	8004494 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	70fb      	strb	r3, [r7, #3]
 8001c56:	460b      	mov	r3, r1
 8001c58:	803b      	strh	r3, [r7, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da0f      	bge.n	8001c8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3310      	adds	r3, #16
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	705a      	strb	r2, [r3, #1]
 8001c88:	e00f      	b.n	8001caa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 020f 	and.w	r2, r3, #15
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb6:	883a      	ldrh	r2, [r7, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	78ba      	ldrb	r2, [r7, #2]
 8001cc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_EP_Open+0xaa>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e00e      	b.n	8001d0c <HAL_PCD_EP_Open+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fdb9 	bl	8003874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da0f      	bge.n	8001d48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3310      	adds	r3, #16
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	705a      	strb	r2, [r3, #1]
 8001d46:	e00f      	b.n	8001d68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_EP_Close+0x6e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Close+0x8c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68f9      	ldr	r1, [r7, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fdf7 	bl	8003984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	799b      	ldrb	r3, [r3, #6]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	f001 fe94 	bl	8003b3c <USB_EPStartXfer>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e40:	681b      	ldr	r3, [r3, #0]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	799b      	ldrb	r3, [r3, #6]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	799b      	ldrb	r3, [r3, #6]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	f001 fe42 	bl	8003b3c <USB_EPStartXfer>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	7912      	ldrb	r2, [r2, #4]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04f      	b.n	8001f80 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da0f      	bge.n	8001f08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	705a      	strb	r2, [r3, #1]
 8001f06:	e00d      	b.n	8001f24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_EP_SetStall+0x82>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e01d      	b.n	8001f80 <HAL_PCD_EP_SetStall+0xbe>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 f9ca 	bl	80042ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7999      	ldrb	r1, [r3, #6]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f70:	461a      	mov	r2, r3
 8001f72:	f002 fbbb 	bl	80046ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	7912      	ldrb	r2, [r2, #4]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e042      	b.n	800202c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0f      	bge.n	8001fce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	705a      	strb	r2, [r3, #1]
 8001fcc:	e00f      	b.n	8001fee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_PCD_EP_ClrStall+0x86>
 800200a:	2302      	movs	r3, #2
 800200c:	e00e      	b.n	800202c <HAL_PCD_EP_ClrStall+0xa4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 f9d3 	bl	80043c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da0c      	bge.n	8002062 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3310      	adds	r3, #16
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e00c      	b.n	800207c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 020f 	and.w	r2, r3, #15
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fff2 	bl	800406c <USB_EPStopXfer>
 8002088:	4603      	mov	r3, r0
 800208a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800208c:	7afb      	ldrb	r3, [r7, #11]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b08a      	sub	sp, #40	@ 0x28
 800209a:	af02      	add	r7, sp, #8
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3310      	adds	r3, #16
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d901      	bls.n	80020ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d902      	bls.n	80020ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3303      	adds	r3, #3
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f2:	e02a      	b.n	800214a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	429a      	cmp	r2, r3
 8002108:	d902      	bls.n	8002110 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3303      	adds	r3, #3
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	4603      	mov	r3, r0
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f002 f847 	bl	80041c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	441a      	add	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	441a      	add	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	429a      	cmp	r2, r3
 800215e:	d809      	bhi.n	8002174 <PCD_WriteEmptyTxFifo+0xde>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002168:	429a      	cmp	r2, r3
 800216a:	d203      	bcs.n	8002174 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1bf      	bne.n	80020f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d811      	bhi.n	80021a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	2201      	movs	r2, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	43db      	mvns	r3, r3
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021a0:	4013      	ands	r3, r2
 80021a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	333c      	adds	r3, #60	@ 0x3c
 80021c8:	3304      	adds	r3, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	799b      	ldrb	r3, [r3, #6]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d17b      	bne.n	80022de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4a61      	ldr	r2, [pc, #388]	@ (8002378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	f240 80b9 	bls.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80b3 	beq.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e0a7      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002232:	461a      	mov	r2, r3
 8002234:	2320      	movs	r3, #32
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	e098      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 8093 	bne.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a4b      	ldr	r2, [pc, #300]	@ (8002378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d90f      	bls.n	800226e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e07e      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	0159      	lsls	r1, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	440b      	add	r3, r1
 8002290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d114      	bne.n	80022d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	f002 fa16 	bl	80046ec <USB_EP0_OutStart>
 80022c0:	e006      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f004 fd1c 	bl	8006d14 <HAL_PCD_DataOutStageCallback>
 80022dc:	e046      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4a26      	ldr	r2, [pc, #152]	@ (800237c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d124      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002302:	6093      	str	r3, [r2, #8]
 8002304:	e032      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	2320      	movs	r3, #32
 8002320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f004 fcf3 	bl	8006d14 <HAL_PCD_DataOutStageCallback>
 800232e:	e01d      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d114      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002358:	461a      	mov	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f002 f9c6 	bl	80046ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f004 fcd4 	bl	8006d14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	4f54300a 	.word	0x4f54300a
 800237c:	4f54310a 	.word	0x4f54310a

08002380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	333c      	adds	r3, #60	@ 0x3c
 8002398:	3304      	adds	r3, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90e      	bls.n	80023d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023cc:	461a      	mov	r2, r3
 80023ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f004 fc8b 	bl	8006cf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <PCD_EP_OutSetupPacket_int+0x88>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d90c      	bls.n	80023fc <PCD_EP_OutSetupPacket_int+0x7c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	799b      	ldrb	r3, [r3, #6]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f4:	461a      	mov	r2, r3
 80023f6:	2101      	movs	r1, #1
 80023f8:	f002 f978 	bl	80046ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	4f54300a 	.word	0x4f54300a

0800240c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800242a:	883b      	ldrh	r3, [r7, #0]
 800242c:	0419      	lsls	r1, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	430a      	orrs	r2, r1
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
 8002438:	e028      	b.n	800248c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e00d      	b.n	800246a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3340      	adds	r3, #64	@ 0x40
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4413      	add	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	3b01      	subs	r3, #1
 8002470:	429a      	cmp	r2, r3
 8002472:	d3ec      	bcc.n	800244e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002474:	883b      	ldrh	r3, [r7, #0]
 8002476:	0418      	lsls	r0, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	3b01      	subs	r3, #1
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	4302      	orrs	r2, r0
 8002484:	3340      	adds	r3, #64	@ 0x40
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	f043 0303 	orr.w	r3, r3, #3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0cc      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b68      	ldr	r3, [pc, #416]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d90c      	bls.n	8002540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b65      	ldr	r3, [pc, #404]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d044      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e067      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4934      	ldr	r1, [pc, #208]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7fe fa1a 	bl	8000a2c <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fa16 	bl	8000a2c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e04f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe f97a 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08007cd8 	.word	0x08007cd8
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b094      	sub	sp, #80	@ 0x50
 80026d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	@ 0x44
 80026dc:	2300      	movs	r3, #0
 80026de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e0:	2300      	movs	r3, #0
 80026e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e8:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d00d      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	f200 80e1 	bhi.w	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 8002702:	e0db      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002708:	e0db      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b72      	ldr	r3, [pc, #456]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800270c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800270e:	e0d8      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b6f      	ldr	r3, [pc, #444]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271a:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002738:	633b      	str	r3, [r7, #48]	@ 0x30
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
 800273e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002754:	0150      	lsls	r0, r2, #5
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4621      	mov	r1, r4
 800275c:	1a51      	subs	r1, r2, r1
 800275e:	6139      	str	r1, [r7, #16]
 8002760:	4629      	mov	r1, r5
 8002762:	eb63 0301 	sbc.w	r3, r3, r1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002774:	4659      	mov	r1, fp
 8002776:	018b      	lsls	r3, r1, #6
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277e:	4651      	mov	r1, sl
 8002780:	018a      	lsls	r2, r1, #6
 8002782:	4651      	mov	r1, sl
 8002784:	ebb2 0801 	subs.w	r8, r2, r1
 8002788:	4659      	mov	r1, fp
 800278a:	eb63 0901 	sbc.w	r9, r3, r1
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a2:	4690      	mov	r8, r2
 80027a4:	4699      	mov	r9, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	eb18 0303 	adds.w	r3, r8, r3
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	462b      	mov	r3, r5
 80027b0:	eb49 0303 	adc.w	r3, r9, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e0:	f7fd fd66 	bl	80002b0 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ec:	e058      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	4611      	mov	r1, r2
 80027fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
 8002804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0159      	lsls	r1, r3, #5
 8002816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281a:	0150      	lsls	r0, r2, #5
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4641      	mov	r1, r8
 8002822:	ebb2 0a01 	subs.w	sl, r2, r1
 8002826:	4649      	mov	r1, r9
 8002828:	eb63 0b01 	sbc.w	fp, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800283c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002840:	ebb2 040a 	subs.w	r4, r2, sl
 8002844:	eb63 050b 	sbc.w	r5, r3, fp
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	00eb      	lsls	r3, r5, #3
 8002852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002856:	00e2      	lsls	r2, r4, #3
 8002858:	4614      	mov	r4, r2
 800285a:	461d      	mov	r5, r3
 800285c:	4643      	mov	r3, r8
 800285e:	18e3      	adds	r3, r4, r3
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	464b      	mov	r3, r9
 8002864:	eb45 0303 	adc.w	r3, r5, r3
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002876:	4629      	mov	r1, r5
 8002878:	028b      	lsls	r3, r1, #10
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002880:	4621      	mov	r1, r4
 8002882:	028a      	lsls	r2, r1, #10
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	61fa      	str	r2, [r7, #28]
 8002890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002894:	f7fd fd0c 	bl	80002b0 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80028b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3750      	adds	r7, #80	@ 0x50
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002910:	4b87      	ldr	r3, [pc, #540]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002916:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4984      	ldr	r1, [pc, #528]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800293e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002944:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4978      	ldr	r1, [pc, #480]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800295c:	2301      	movs	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8083 	beq.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a6e      	ldr	r2, [pc, #440]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800298a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a69      	ldr	r2, [pc, #420]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002994:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002996:	f7fe f849 	bl	8000a2c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe f845 	bl	8000a2c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e162      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029b0:	4b60      	ldr	r3, [pc, #384]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029da:	4b55      	ldr	r3, [pc, #340]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e4:	4b54      	ldr	r3, [pc, #336]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ea:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d114      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe f813 	bl	8000a2c <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f80f 	bl	8000a2c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e12a      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4e:	4938      	ldr	r1, [pc, #224]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
 8002a54:	e005      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002a56:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a5c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	4930      	ldr	r1, [pc, #192]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8002a86:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a88:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	4922      	ldr	r1, [pc, #136]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d011      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abe:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	491a      	ldr	r1, [pc, #104]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad6:	d101      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d004      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b80      	cmp	r3, #128	@ 0x80
 8002b0a:	f040 8091 	bne.w	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b14:	f7fd ff8a 	bl	8000a2c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b1a:	e013      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b1c:	f7fd ff86 	bl	8000a2c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0a3      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000
 8002b38:	42470e40 	.word	0x42470e40
 8002b3c:	424711e0 	.word	0x424711e0
 8002b40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b44:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002b50:	4a4c      	ldr	r2, [pc, #304]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b56:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d023      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d019      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d00e      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d019      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb2:	d110      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	071b      	lsls	r3, r3, #28
 8002bce:	492c      	ldr	r1, [pc, #176]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	019b      	lsls	r3, r3, #6
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	071b      	lsls	r3, r3, #28
 8002bfc:	4920      	ldr	r1, [pc, #128]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c0a:	f7fd ff0f 	bl	8000a2c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c12:	f7fd ff0b 	bl	8000a2c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e028      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3c:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c64:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	4904      	ldr	r1, [pc, #16]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	424710d8 	.word	0x424710d8
 8002c88:	42470068 	.word	0x42470068

08002c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e273      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e24e      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd fe72 	bl	8000a2c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fd fe6e 	bl	8000a2c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e213      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fd fe5e 	bl	8000a2c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fd fe5a 	bl	8000a2c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1ff      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1d3      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fd fe13 	bl	8000a2c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fd fe0f 	bl	8000a2c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1b4      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fd fdf2 	bl	8000a2c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fd fdee 	bl	8000a2c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e193      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd fdd2 	bl	8000a2c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fd fdce 	bl	8000a2c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e173      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd fdbb 	bl	8000a2c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fd fdb7 	bl	8000a2c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e15c      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b83      	ldr	r3, [pc, #524]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7f      	ldr	r3, [pc, #508]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b7c      	ldr	r3, [pc, #496]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b79      	ldr	r3, [pc, #484]	@ (8003108 <HAL_RCC_OscConfig+0x47c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCC_OscConfig+0x47c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x47c>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fd77 	bl	8000a2c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fd fd73 	bl	8000a2c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e118      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x47c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b66      	ldr	r3, [pc, #408]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a65      	ldr	r2, [pc, #404]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b61      	ldr	r3, [pc, #388]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a60      	ldr	r2, [pc, #384]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b5a      	ldr	r3, [pc, #360]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a59      	ldr	r2, [pc, #356]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	4b57      	ldr	r3, [pc, #348]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fd fd38 	bl	8000a2c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fd fd34 	bl	8000a2c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0d7      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fd22 	bl	8000a2c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fd fd1e 	bl	8000a2c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0c1      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b40      	ldr	r3, [pc, #256]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	4a3a      	ldr	r2, [pc, #232]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80ad 	beq.w	8003184 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b36      	ldr	r3, [pc, #216]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d060      	beq.n	80030f8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d145      	bne.n	80030ca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b33      	ldr	r3, [pc, #204]	@ (800310c <HAL_RCC_OscConfig+0x480>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fd fcf2 	bl	8000a2c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fcee 	bl	8000a2c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e093      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	491b      	ldr	r1, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x480>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fd fcc3 	bl	8000a2c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fd fcbf 	bl	8000a2c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e064      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x41e>
 80030c8:	e05c      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_RCC_OscConfig+0x480>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd fcac 	bl	8000a2c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fd fca8 	bl	8000a2c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e04d      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x44c>
 80030f6:	e045      	b.n	8003184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e040      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
 8003104:	40023800 	.word	0x40023800
 8003108:	40007000 	.word	0x40007000
 800310c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003110:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <HAL_RCC_OscConfig+0x504>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d030      	beq.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d129      	bne.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d122      	bne.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003148:	4293      	cmp	r3, r2
 800314a:	d119      	bne.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d10f      	bne.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003194:	b084      	sub	sp, #16
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	f107 001c 	add.w	r0, r7, #28
 80031a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d123      	bne.n	80031f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80031c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f001 fadc 	bl	80047a8 <USB_CoreReset>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e01b      	b.n	800322e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 fad0 	bl	80047a8 <USB_CoreReset>
 8003208:	4603      	mov	r3, r0
 800320a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800320c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003220:	e005      	b.n	800322e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800322e:	7fbb      	ldrb	r3, [r7, #30]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10b      	bne.n	800324c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f043 0206 	orr.w	r2, r3, #6
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003258:	b004      	add	sp, #16
 800325a:	4770      	bx	lr

0800325c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d165      	bne.n	800333c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4a41      	ldr	r2, [pc, #260]	@ (8003378 <USB_SetTurnaroundTime+0x11c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d906      	bls.n	8003286 <USB_SetTurnaroundTime+0x2a>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4a40      	ldr	r2, [pc, #256]	@ (800337c <USB_SetTurnaroundTime+0x120>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d202      	bcs.n	8003286 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003280:	230f      	movs	r3, #15
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e062      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4a3c      	ldr	r2, [pc, #240]	@ (800337c <USB_SetTurnaroundTime+0x120>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d306      	bcc.n	800329c <USB_SetTurnaroundTime+0x40>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a3b      	ldr	r2, [pc, #236]	@ (8003380 <USB_SetTurnaroundTime+0x124>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d202      	bcs.n	800329c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003296:	230e      	movs	r3, #14
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e057      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4a38      	ldr	r2, [pc, #224]	@ (8003380 <USB_SetTurnaroundTime+0x124>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d306      	bcc.n	80032b2 <USB_SetTurnaroundTime+0x56>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4a37      	ldr	r2, [pc, #220]	@ (8003384 <USB_SetTurnaroundTime+0x128>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d202      	bcs.n	80032b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032ac:	230d      	movs	r3, #13
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e04c      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4a33      	ldr	r2, [pc, #204]	@ (8003384 <USB_SetTurnaroundTime+0x128>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d306      	bcc.n	80032c8 <USB_SetTurnaroundTime+0x6c>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4a32      	ldr	r2, [pc, #200]	@ (8003388 <USB_SetTurnaroundTime+0x12c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d802      	bhi.n	80032c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032c2:	230c      	movs	r3, #12
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e041      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <USB_SetTurnaroundTime+0x12c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d906      	bls.n	80032de <USB_SetTurnaroundTime+0x82>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4a2e      	ldr	r2, [pc, #184]	@ (800338c <USB_SetTurnaroundTime+0x130>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d802      	bhi.n	80032de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80032d8:	230b      	movs	r3, #11
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e036      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <USB_SetTurnaroundTime+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d906      	bls.n	80032f4 <USB_SetTurnaroundTime+0x98>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4a29      	ldr	r2, [pc, #164]	@ (8003390 <USB_SetTurnaroundTime+0x134>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d802      	bhi.n	80032f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032ee:	230a      	movs	r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e02b      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a26      	ldr	r2, [pc, #152]	@ (8003390 <USB_SetTurnaroundTime+0x134>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d906      	bls.n	800330a <USB_SetTurnaroundTime+0xae>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a25      	ldr	r2, [pc, #148]	@ (8003394 <USB_SetTurnaroundTime+0x138>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d202      	bcs.n	800330a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003304:	2309      	movs	r3, #9
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e020      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <USB_SetTurnaroundTime+0x138>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d306      	bcc.n	8003320 <USB_SetTurnaroundTime+0xc4>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4a20      	ldr	r2, [pc, #128]	@ (8003398 <USB_SetTurnaroundTime+0x13c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d802      	bhi.n	8003320 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800331a:	2308      	movs	r3, #8
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e015      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <USB_SetTurnaroundTime+0x13c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d906      	bls.n	8003336 <USB_SetTurnaroundTime+0xda>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4a1c      	ldr	r2, [pc, #112]	@ (800339c <USB_SetTurnaroundTime+0x140>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d202      	bcs.n	8003336 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003330:	2307      	movs	r3, #7
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e00a      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003336:	2306      	movs	r3, #6
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e007      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003342:	2309      	movs	r3, #9
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e001      	b.n	800334c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003348:	2309      	movs	r3, #9
 800334a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	00d8acbf 	.word	0x00d8acbf
 800337c:	00e4e1c0 	.word	0x00e4e1c0
 8003380:	00f42400 	.word	0x00f42400
 8003384:	01067380 	.word	0x01067380
 8003388:	011a499f 	.word	0x011a499f
 800338c:	01312cff 	.word	0x01312cff
 8003390:	014ca43f 	.word	0x014ca43f
 8003394:	016e3600 	.word	0x016e3600
 8003398:	01a6ab1f 	.word	0x01a6ab1f
 800339c:	01e84800 	.word	0x01e84800

080033a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d115      	bne.n	8003432 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003412:	200a      	movs	r0, #10
 8003414:	f7fd fb16 	bl	8000a44 <HAL_Delay>
      ms += 10U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	330a      	adds	r3, #10
 800341c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f001 f933 	bl	800468a <USB_GetMode>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d01e      	beq.n	8003468 <USB_SetCurrentMode+0x84>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2bc7      	cmp	r3, #199	@ 0xc7
 800342e:	d9f0      	bls.n	8003412 <USB_SetCurrentMode+0x2e>
 8003430:	e01a      	b.n	8003468 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003444:	200a      	movs	r0, #10
 8003446:	f7fd fafd 	bl	8000a44 <HAL_Delay>
      ms += 10U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	330a      	adds	r3, #10
 800344e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f001 f91a 	bl	800468a <USB_GetMode>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <USB_SetCurrentMode+0x84>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003460:	d9f0      	bls.n	8003444 <USB_SetCurrentMode+0x60>
 8003462:	e001      	b.n	8003468 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e005      	b.n	8003474 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2bc8      	cmp	r3, #200	@ 0xc8
 800346c:	d101      	bne.n	8003472 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800347c:	b084      	sub	sp, #16
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800348a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e009      	b.n	80034b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3340      	adds	r3, #64	@ 0x40
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3301      	adds	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0e      	cmp	r3, #14
 80034b4:	d9f2      	bls.n	800349c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11c      	bne.n	80034f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e005      	b.n	8003504 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800350a:	461a      	mov	r2, r3
 800350c:	2300      	movs	r3, #0
 800350e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003510:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10d      	bne.n	8003534 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003520:	2100      	movs	r1, #0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f968 	bl	80037f8 <USB_SetDevSpeed>
 8003528:	e008      	b.n	800353c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800352a:	2101      	movs	r1, #1
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f963 	bl	80037f8 <USB_SetDevSpeed>
 8003532:	e003      	b.n	800353c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003534:	2103      	movs	r1, #3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f95e 	bl	80037f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800353c:	2110      	movs	r1, #16
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8fa 	bl	8003738 <USB_FlushTxFifo>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f924 	bl	800379c <USB_FlushRxFifo>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003564:	461a      	mov	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357c:	461a      	mov	r2, r3
 800357e:	2300      	movs	r3, #0
 8003580:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e043      	b.n	8003610 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800359e:	d118      	bne.n	80035d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b2:	461a      	mov	r2, r3
 80035b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e013      	b.n	80035e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c8:	461a      	mov	r2, r3
 80035ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	e008      	b.n	80035e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035de:	461a      	mov	r2, r3
 80035e0:	2300      	movs	r3, #0
 80035e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2300      	movs	r3, #0
 80035f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003602:	461a      	mov	r2, r3
 8003604:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003608:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	3301      	adds	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003614:	461a      	mov	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4293      	cmp	r3, r2
 800361a:	d3b5      	bcc.n	8003588 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	e043      	b.n	80036aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003634:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003638:	d118      	bne.n	800366c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e013      	b.n	800367e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003662:	461a      	mov	r2, r3
 8003664:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e008      	b.n	800367e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	2300      	movs	r3, #0
 800367c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2300      	movs	r3, #0
 800368e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369c:	461a      	mov	r2, r3
 800369e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036ae:	461a      	mov	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d3b5      	bcc.n	8003622 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <USB_DevInit+0x2b8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f043 0208 	orr.w	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800370c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003730:	b004      	add	sp, #16
 8003732:	4770      	bx	lr
 8003734:	803c3800 	.word	0x803c3800

08003738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003752:	d901      	bls.n	8003758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e01b      	b.n	8003790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	daf2      	bge.n	8003746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	019b      	lsls	r3, r3, #6
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3301      	adds	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800377c:	d901      	bls.n	8003782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e006      	b.n	8003790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d0f0      	beq.n	8003770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037b4:	d901      	bls.n	80037ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e018      	b.n	80037ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	daf2      	bge.n	80037a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2210      	movs	r2, #16
 80037ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037d8:	d901      	bls.n	80037de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e006      	b.n	80037ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d0f0      	beq.n	80037cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
 800384e:	e00a      	b.n	8003866 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d002      	beq.n	800385c <USB_GetDevSpeed+0x32>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d102      	bne.n	8003862 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800385c:	2302      	movs	r3, #2
 800385e:	75fb      	strb	r3, [r7, #23]
 8003860:	e001      	b.n	8003866 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003862:	230f      	movs	r3, #15
 8003864:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d13a      	bne.n	8003906 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d155      	bne.n	8003974 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	059b      	lsls	r3, r3, #22
 80038ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038ec:	4313      	orrs	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e036      	b.n	8003974 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11a      	bne.n	8003974 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800395a:	430b      	orrs	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003972:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d161      	bne.n	8003a64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039b6:	d11f      	bne.n	80039f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a18:	4013      	ands	r3, r2
 8003a1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0159      	lsls	r1, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4b35      	ldr	r3, [pc, #212]	@ (8003b34 <USB_DeactivateEndpoint+0x1b0>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
 8003a62:	e060      	b.n	8003b26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a7a:	d11f      	bne.n	8003abc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003adc:	4013      	ands	r3, r2
 8003ade:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	43db      	mvns	r3, r3
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b00:	4013      	ands	r3, r2
 8003b02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0159      	lsls	r1, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	440b      	add	r3, r1
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <USB_DeactivateEndpoint+0x1b4>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	ec337800 	.word	0xec337800
 8003b38:	eff37800 	.word	0xeff37800

08003b3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 817a 	bne.w	8003e52 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d132      	bne.n	8003bcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ba4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bc4:	0cdb      	lsrs	r3, r3, #19
 8003bc6:	04db      	lsls	r3, r3, #19
 8003bc8:	6113      	str	r3, [r2, #16]
 8003bca:	e092      	b.n	8003cf2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003be6:	0cdb      	lsrs	r3, r3, #19
 8003be8:	04db      	lsls	r3, r3, #19
 8003bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003c0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003c0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11a      	bne.n	8003c4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d903      	bls.n	8003c2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c48:	6113      	str	r3, [r2, #16]
 8003c4a:	e01b      	b.n	8003c84 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6919      	ldr	r1, [r3, #16]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	440b      	add	r3, r1
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c70:	4ba2      	ldr	r3, [pc, #648]	@ (8003efc <USB_EPStartXfer+0x3c0>)
 8003c72:	400b      	ands	r3, r1
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	0148      	lsls	r0, r1, #5
 8003c78:	69f9      	ldr	r1, [r7, #28]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c80:	4313      	orrs	r3, r2
 8003c82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	0148      	lsls	r0, r1, #5
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	4401      	add	r1, r0
 8003ca2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	791b      	ldrb	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d11f      	bne.n	8003cf2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d14b      	bne.n	8003d90 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d128      	bne.n	8003d6e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d110      	bne.n	8003d4e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e00f      	b.n	8003d6e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e165      	b.n	800405c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003daa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003dae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d015      	beq.n	8003de4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 814d 	beq.w	800405c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dde:	4313      	orrs	r3, r2
 8003de0:	634b      	str	r3, [r1, #52]	@ 0x34
 8003de2:	e13b      	b.n	800405c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d110      	bne.n	8003e16 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e00f      	b.n	8003e36 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	b298      	uxth	r0, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f9b8 	bl	80041c0 <USB_WritePacket>
 8003e50:	e104      	b.n	800405c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e6c:	0cdb      	lsrs	r3, r3, #19
 8003e6e:	04db      	lsls	r3, r3, #19
 8003e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e94:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d131      	bne.n	8003f00 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	0148      	lsls	r0, r1, #5
 8003ece:	69f9      	ldr	r1, [r7, #28]
 8003ed0:	4401      	add	r1, r0
 8003ed2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ef8:	6113      	str	r3, [r2, #16]
 8003efa:	e061      	b.n	8003fc0 <USB_EPStartXfer+0x484>
 8003efc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1e:	69b9      	ldr	r1, [r7, #24]
 8003f20:	0148      	lsls	r0, r1, #5
 8003f22:	69f9      	ldr	r1, [r7, #28]
 8003f24:	4401      	add	r1, r0
 8003f26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f4c:	6113      	str	r3, [r2, #16]
 8003f4e:	e037      	b.n	8003fc0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4413      	add	r3, r2
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	8afa      	ldrh	r2, [r7, #22]
 8003f6c:	fb03 f202 	mul.w	r2, r3, r2
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	8afb      	ldrh	r3, [r7, #22]
 8003f84:	04d9      	lsls	r1, r3, #19
 8003f86:	4b38      	ldr	r3, [pc, #224]	@ (8004068 <USB_EPStartXfer+0x52c>)
 8003f88:	400b      	ands	r3, r1
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	0148      	lsls	r0, r1, #5
 8003f8e:	69f9      	ldr	r1, [r7, #28]
 8003f90:	4401      	add	r1, r0
 8003f92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f96:	4313      	orrs	r3, r2
 8003f98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	0148      	lsls	r0, r1, #5
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	4401      	add	r1, r0
 8003fb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10d      	bne.n	8003fe2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	68d9      	ldr	r1, [r3, #12]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fde:	460a      	mov	r2, r1
 8003fe0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d128      	bne.n	800403c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d110      	bne.n	800401c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004014:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00f      	b.n	800403c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	0151      	lsls	r1, r2, #5
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	440a      	add	r2, r1
 8004052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004056:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800405a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	1ff80000 	.word	0x1ff80000

0800406c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d14a      	bne.n	8004120 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800409e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040a2:	f040 8086 	bne.w	80041b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	7812      	ldrb	r2, [r2, #0]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d902      	bls.n	8004104 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
          break;
 8004102:	e056      	b.n	80041b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800411c:	d0e7      	beq.n	80040ee <USB_EPStopXfer+0x82>
 800411e:	e048      	b.n	80041b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004138:	d13b      	bne.n	80041b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004158:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800415c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800417c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004180:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3301      	adds	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800418e:	4293      	cmp	r3, r2
 8004190:	d902      	bls.n	8004198 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
          break;
 8004196:	e00c      	b.n	80041b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b0:	d0e7      	beq.n	8004182 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	460b      	mov	r3, r1
 80041d0:	71fb      	strb	r3, [r7, #7]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80041de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d123      	bne.n	800422e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80041e6:	88bb      	ldrh	r3, [r7, #4]
 80041e8:	3303      	adds	r3, #3
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e018      	b.n	8004226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	031a      	lsls	r2, r3, #12
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004200:	461a      	mov	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3301      	adds	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	3301      	adds	r3, #1
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d3e2      	bcc.n	80041f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3724      	adds	r7, #36	@ 0x24
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800423c:	b480      	push	{r7}
 800423e:	b08b      	sub	sp, #44	@ 0x2c
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	b29b      	uxth	r3, r3
 8004258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	e014      	b.n	8004292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	601a      	str	r2, [r3, #0]
    pDest++;
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	3301      	adds	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	3301      	adds	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	3301      	adds	r3, #1
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	3301      	adds	r3, #1
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3e6      	bcc.n	8004268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800429a:	8bfb      	ldrh	r3, [r7, #30]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01e      	beq.n	80042de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042aa:	461a      	mov	r2, r3
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	701a      	strb	r2, [r3, #0]
      i++;
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	3301      	adds	r3, #1
 80042ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	3301      	adds	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80042d2:	8bfb      	ldrh	r3, [r7, #30]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80042d8:	8bfb      	ldrh	r3, [r7, #30]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ea      	bne.n	80042b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	372c      	adds	r7, #44	@ 0x2c
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d12c      	bne.n	8004362 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db12      	blt.n	8004340 <USB_EPSetStall+0x54>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00f      	beq.n	8004340 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800433a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800433e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800435a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e02b      	b.n	80043ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db12      	blt.n	800439a <USB_EPSetStall+0xae>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00f      	beq.n	800439a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004394:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004398:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d128      	bne.n	8004436 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	0151      	lsls	r1, r2, #5
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	440a      	add	r2, r1
 80043fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004402:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <USB_EPClearStall+0x4c>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d138      	bne.n	8004486 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e027      	b.n	8004486 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004450:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004454:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d003      	beq.n	8004466 <USB_EPClearStall+0x9e>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	791b      	ldrb	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d10f      	bne.n	8004486 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004484:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800450e:	f023 0302 	bic.w	r3, r3, #2
 8004512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800453c:	f023 0303 	bic.w	r3, r3, #3
 8004540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0c1b      	lsrs	r3, r3, #16
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	b29b      	uxth	r3, r3
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004620:	68bb      	ldr	r3, [r7, #8]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800462e:	b480      	push	{r7}
 8004630:	b087      	sub	sp, #28
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004650:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	b2db      	uxtb	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800467c:	68bb      	ldr	r3, [r7, #8]
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0301 	and.w	r3, r3, #1
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	460b      	mov	r3, r1
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	333c      	adds	r3, #60	@ 0x3c
 8004702:	3304      	adds	r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <USB_EP0_OutStart+0xb8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d90a      	bls.n	8004726 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004720:	d101      	bne.n	8004726 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e037      	b.n	8004796 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004754:	f043 0318 	orr.w	r3, r3, #24
 8004758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004768:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800476c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10f      	bne.n	8004794 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800478e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	4f54300a 	.word	0x4f54300a

080047a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c0:	d901      	bls.n	80047c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01b      	b.n	80047fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	daf2      	bge.n	80047b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f043 0201 	orr.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ea:	d901      	bls.n	80047f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e006      	b.n	80047fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d0f0      	beq.n	80047de <USB_CoreReset+0x36>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004818:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800481c:	f002 fd2c 	bl	8007278 <USBD_static_malloc>
 8004820:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	32b0      	adds	r2, #176	@ 0xb0
 8004832:	2100      	movs	r1, #0
 8004834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004838:	2302      	movs	r3, #2
 800483a:	e0d4      	b.n	80049e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800483c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004840:	2100      	movs	r1, #0
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f002 fd90 	bl	8007368 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	32b0      	adds	r2, #176	@ 0xb0
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	32b0      	adds	r2, #176	@ 0xb0
 8004862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7c1b      	ldrb	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d138      	bne.n	80048e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004874:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 8004876:	7819      	ldrb	r1, [r3, #0]
 8004878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800487c:	2202      	movs	r2, #2
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 fb89 	bl	8006f96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004884:	4b5a      	ldr	r3, [pc, #360]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	3324      	adds	r3, #36	@ 0x24
 800489a:	2201      	movs	r2, #1
 800489c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800489e:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80048a0:	7819      	ldrb	r1, [r3, #0]
 80048a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048a6:	2202      	movs	r2, #2
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 fb74 	bl	8006f96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80048c6:	2201      	movs	r2, #1
 80048c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80048ca:	4b4b      	ldr	r3, [pc, #300]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3326      	adds	r3, #38	@ 0x26
 80048e0:	2210      	movs	r2, #16
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e035      	b.n	8004952 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 80048e8:	7819      	ldrb	r1, [r3, #0]
 80048ea:	2340      	movs	r3, #64	@ 0x40
 80048ec:	2202      	movs	r2, #2
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f002 fb51 	bl	8006f96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80048f4:	4b3e      	ldr	r3, [pc, #248]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f003 020f 	and.w	r2, r3, #15
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3324      	adds	r3, #36	@ 0x24
 800490a:	2201      	movs	r2, #1
 800490c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800490e:	4b39      	ldr	r3, [pc, #228]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 8004910:	7819      	ldrb	r1, [r3, #0]
 8004912:	2340      	movs	r3, #64	@ 0x40
 8004914:	2202      	movs	r2, #2
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f002 fb3d 	bl	8006f96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800491c:	4b35      	ldr	r3, [pc, #212]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f003 020f 	and.w	r2, r3, #15
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004934:	2201      	movs	r2, #1
 8004936:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004938:	4b2f      	ldr	r3, [pc, #188]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3326      	adds	r3, #38	@ 0x26
 800494e:	2210      	movs	r2, #16
 8004950:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 8004954:	7819      	ldrb	r1, [r3, #0]
 8004956:	2308      	movs	r3, #8
 8004958:	2203      	movs	r2, #3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f002 fb1b 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3324      	adds	r3, #36	@ 0x24
 8004976:	2201      	movs	r2, #1
 8004978:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	33b0      	adds	r3, #176	@ 0xb0
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80049b0:	2302      	movs	r3, #2
 80049b2:	e018      	b.n	80049e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7c1b      	ldrb	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80049be:	7819      	ldrb	r1, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f002 fbd2 	bl	8007174 <USBD_LL_PrepareReceive>
 80049d0:	e008      	b.n	80049e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049d2:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80049d4:	7819      	ldrb	r1, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049dc:	2340      	movs	r3, #64	@ 0x40
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f002 fbc8 	bl	8007174 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000093 	.word	0x20000093
 80049f4:	20000094 	.word	0x20000094
 80049f8:	20000095 	.word	0x20000095

080049fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004a08:	4b3a      	ldr	r3, [pc, #232]	@ (8004af4 <USBD_CDC_DeInit+0xf8>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f002 fae7 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004a14:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <USBD_CDC_DeInit+0xf8>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3324      	adds	r3, #36	@ 0x24
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <USBD_CDC_DeInit+0xfc>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f002 fad4 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <USBD_CDC_DeInit+0xfc>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a52:	2200      	movs	r2, #0
 8004a54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 fac0 	bl	8006fe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004a62:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3324      	adds	r3, #36	@ 0x24
 8004a78:	2200      	movs	r2, #0
 8004a7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3326      	adds	r3, #38	@ 0x26
 8004a92:	2200      	movs	r2, #0
 8004a94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	32b0      	adds	r2, #176	@ 0xb0
 8004aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	33b0      	adds	r3, #176	@ 0xb0
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	32b0      	adds	r2, #176	@ 0xb0
 8004ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 fbe2 	bl	8007294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	32b0      	adds	r2, #176	@ 0xb0
 8004ada:	2100      	movs	r1, #0
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000093 	.word	0x20000093
 8004af8:	20000094 	.word	0x20000094
 8004afc:	20000095 	.word	0x20000095

08004b00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	32b0      	adds	r2, #176	@ 0xb0
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0bf      	b.n	8004cb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d050      	beq.n	8004bde <USBD_CDC_Setup+0xde>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	f040 80af 	bne.w	8004ca0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	88db      	ldrh	r3, [r3, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d03a      	beq.n	8004bc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da1b      	bge.n	8004b8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	33b0      	adds	r3, #176	@ 0xb0
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004b6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	88d2      	ldrh	r2, [r2, #6]
 8004b70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	88db      	ldrh	r3, [r3, #6]
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	bf28      	it	cs
 8004b7a:	2307      	movcs	r3, #7
 8004b7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	89fa      	ldrh	r2, [r7, #14]
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f001 fdb1 	bl	80066ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004b8a:	e090      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	785a      	ldrb	r2, [r3, #1]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	88db      	ldrh	r3, [r3, #6]
 8004b9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b9c:	d803      	bhi.n	8004ba6 <USBD_CDC_Setup+0xa6>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	88db      	ldrh	r3, [r3, #6]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	e000      	b.n	8004ba8 <USBD_CDC_Setup+0xa8>
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 fdc3 	bl	8006744 <USBD_CtlPrepareRx>
      break;
 8004bbe:	e076      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	33b0      	adds	r3, #176	@ 0xb0
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	7850      	ldrb	r0, [r2, #1]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4798      	blx	r3
      break;
 8004bdc:	e067      	b.n	8004cae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b0b      	cmp	r3, #11
 8004be4:	d851      	bhi.n	8004c8a <USBD_CDC_Setup+0x18a>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <USBD_CDC_Setup+0xec>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c99 	.word	0x08004c99
 8004bf4:	08004c8b 	.word	0x08004c8b
 8004bf8:	08004c8b 	.word	0x08004c8b
 8004bfc:	08004c8b 	.word	0x08004c8b
 8004c00:	08004c8b 	.word	0x08004c8b
 8004c04:	08004c8b 	.word	0x08004c8b
 8004c08:	08004c8b 	.word	0x08004c8b
 8004c0c:	08004c8b 	.word	0x08004c8b
 8004c10:	08004c8b 	.word	0x08004c8b
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c71 	.word	0x08004c71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d107      	bne.n	8004c38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c28:	f107 030a 	add.w	r3, r7, #10
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 fd5b 	bl	80066ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c36:	e032      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 fce5 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 8004c40:	2303      	movs	r3, #3
 8004c42:	75fb      	strb	r3, [r7, #23]
          break;
 8004c44:	e02b      	b.n	8004c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c52:	f107 030d 	add.w	r3, r7, #13
 8004c56:	2201      	movs	r2, #1
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fd46 	bl	80066ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c60:	e01d      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fcd0 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c6e:	e016      	b.n	8004c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d00f      	beq.n	8004c9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 fcc3 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c88:	e008      	b.n	8004c9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 fcbc 	bl	800660a <USBD_CtlError>
          ret = USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	75fb      	strb	r3, [r7, #23]
          break;
 8004c96:	e002      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
          break;
 8004c98:	bf00      	nop
 8004c9a:	e008      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
          break;
 8004c9c:	bf00      	nop
      }
      break;
 8004c9e:	e006      	b.n	8004cae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 fcb1 	bl	800660a <USBD_CtlError>
      ret = USBD_FAIL;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cac:	bf00      	nop
  }

  return (uint8_t)ret;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	32b0      	adds	r2, #176	@ 0xb0
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e065      	b.n	8004dae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	32b0      	adds	r2, #176	@ 0xb0
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3318      	adds	r3, #24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02f      	beq.n	8004d6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3318      	adds	r3, #24
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 010f 	and.w	r1, r3, #15
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4403      	add	r3, r0
 8004d34:	331c      	adds	r3, #28
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d112      	bne.n	8004d6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3318      	adds	r3, #24
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d5e:	78f9      	ldrb	r1, [r7, #3]
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f002 f9e4 	bl	8007132 <USBD_LL_Transmit>
 8004d6a:	e01f      	b.n	8004dac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	33b0      	adds	r3, #176	@ 0xb0
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	33b0      	adds	r3, #176	@ 0xb0
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	32b0      	adds	r2, #176	@ 0xb0
 8004dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	32b0      	adds	r2, #176	@ 0xb0
 8004ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e01a      	b.n	8004e1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f002 f9e2 	bl	80071b6 <USBD_LL_GetRxDataSize>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	33b0      	adds	r3, #176	@ 0xb0
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	32b0      	adds	r2, #176	@ 0xb0
 8004e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e024      	b.n	8004e92 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	33b0      	adds	r3, #176	@ 0xb0
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <USBD_CDC_EP0_RxReady+0x6a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d014      	beq.n	8004e90 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	33b0      	adds	r3, #176	@ 0xb0
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004e7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	22ff      	movs	r2, #255	@ 0xff
 8004e8c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ea4:	2182      	movs	r1, #130	@ 0x82
 8004ea6:	4818      	ldr	r0, [pc, #96]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ea8:	f000 fd4f 	bl	800594a <USBD_GetEpDesc>
 8004eac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4815      	ldr	r0, [pc, #84]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004eb2:	f000 fd4a 	bl	800594a <USBD_GetEpDesc>
 8004eb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004eb8:	2181      	movs	r1, #129	@ 0x81
 8004eba:	4813      	ldr	r0, [pc, #76]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ebc:	f000 fd45 	bl	800594a <USBD_GetEpDesc>
 8004ec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004edc:	711a      	strb	r2, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ef0:	711a      	strb	r2, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2243      	movs	r2, #67	@ 0x43
 8004efa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004efc:	4b02      	ldr	r3, [pc, #8]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000050 	.word	0x20000050

08004f0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f14:	2182      	movs	r1, #130	@ 0x82
 8004f16:	4818      	ldr	r0, [pc, #96]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f18:	f000 fd17 	bl	800594a <USBD_GetEpDesc>
 8004f1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4815      	ldr	r0, [pc, #84]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f22:	f000 fd12 	bl	800594a <USBD_GetEpDesc>
 8004f26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f28:	2181      	movs	r1, #129	@ 0x81
 8004f2a:	4813      	ldr	r0, [pc, #76]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f2c:	f000 fd0d 	bl	800594a <USBD_GetEpDesc>
 8004f30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2210      	movs	r2, #16
 8004f3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2200      	movs	r2, #0
 8004f48:	711a      	strb	r2, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f042 0202 	orr.w	r2, r2, #2
 8004f50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	711a      	strb	r2, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f042 0202 	orr.w	r2, r2, #2
 8004f64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2243      	movs	r2, #67	@ 0x43
 8004f6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000050 	.word	0x20000050

08004f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f84:	2182      	movs	r1, #130	@ 0x82
 8004f86:	4818      	ldr	r0, [pc, #96]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f88:	f000 fcdf 	bl	800594a <USBD_GetEpDesc>
 8004f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4815      	ldr	r0, [pc, #84]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f92:	f000 fcda 	bl	800594a <USBD_GetEpDesc>
 8004f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f98:	2181      	movs	r1, #129	@ 0x81
 8004f9a:	4813      	ldr	r0, [pc, #76]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f9c:	f000 fcd5 	bl	800594a <USBD_GetEpDesc>
 8004fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2210      	movs	r2, #16
 8004fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fbc:	711a      	strb	r2, [r3, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd0:	711a      	strb	r2, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2243      	movs	r2, #67	@ 0x43
 8004fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004fdc:	4b02      	ldr	r3, [pc, #8]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000050 	.word	0x20000050

08004fec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	220a      	movs	r2, #10
 8004ff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ffa:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	2000000c 	.word	0x2000000c

0800500c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800501c:	2303      	movs	r3, #3
 800501e:	e009      	b.n	8005034 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	33b0      	adds	r3, #176	@ 0xb0
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	32b0      	adds	r2, #176	@ 0xb0
 8005056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005062:	2303      	movs	r3, #3
 8005064:	e008      	b.n	8005078 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	32b0      	adds	r2, #176	@ 0xb0
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e004      	b.n	80050b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	32b0      	adds	r2, #176	@ 0xb0
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e025      	b.n	8005132 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11f      	bne.n	8005130 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80050f8:	4b10      	ldr	r3, [pc, #64]	@ (800513c <USBD_CDC_TransmitPacket+0x7c>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4403      	add	r3, r0
 8005112:	3318      	adds	r3, #24
 8005114:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005116:	4b09      	ldr	r3, [pc, #36]	@ (800513c <USBD_CDC_TransmitPacket+0x7c>)
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 f803 	bl	8007132 <USBD_LL_Transmit>

    ret = USBD_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000093 	.word	0x20000093

08005140 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	32b0      	adds	r2, #176	@ 0xb0
 8005152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005156:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	32b0      	adds	r2, #176	@ 0xb0
 8005162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800516a:	2303      	movs	r3, #3
 800516c:	e018      	b.n	80051a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	7c1b      	ldrb	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <USBD_CDC_ReceivePacket+0x68>)
 8005178:	7819      	ldrb	r1, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 fff5 	bl	8007174 <USBD_LL_PrepareReceive>
 800518a:	e008      	b.n	800519e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <USBD_CDC_ReceivePacket+0x68>)
 800518e:	7819      	ldrb	r1, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005196:	2340      	movs	r3, #64	@ 0x40
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 ffeb 	bl	8007174 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000094 	.word	0x20000094

080051ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e01f      	b.n	8005204 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	79fa      	ldrb	r2, [r7, #7]
 80051f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 fe61 	bl	8006ec0 <USBD_LL_Init>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005220:	2303      	movs	r3, #3
 8005222:	e025      	b.n	8005270 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	32ae      	adds	r2, #174	@ 0xae
 8005236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00f      	beq.n	8005260 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	32ae      	adds	r2, #174	@ 0xae
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	f107 020e 	add.w	r2, r7, #14
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 fe6d 	bl	8006f60 <USBD_LL_Start>
 8005286:	4603      	mov	r3, r0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005298:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	4611      	mov	r1, r2
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	4611      	mov	r1, r2
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005304:	2303      	movs	r3, #3
 8005306:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f001 f936 	bl	8006596 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2b02      	cmp	r3, #2
 800534c:	d01a      	beq.n	8005384 <USBD_LL_SetupStage+0x72>
 800534e:	2b02      	cmp	r3, #2
 8005350:	d822      	bhi.n	8005398 <USBD_LL_SetupStage+0x86>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <USBD_LL_SetupStage+0x4a>
 8005356:	2b01      	cmp	r3, #1
 8005358:	d00a      	beq.n	8005370 <USBD_LL_SetupStage+0x5e>
 800535a:	e01d      	b.n	8005398 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb63 	bl	8005a30 <USBD_StdDevReq>
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
      break;
 800536e:	e020      	b.n	80053b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fbcb 	bl	8005b14 <USBD_StdItfReq>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]
      break;
 8005382:	e016      	b.n	80053b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fc2d 	bl	8005bec <USBD_StdEPReq>
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]
      break;
 8005396:	e00c      	b.n	80053b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800539e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fe3a 	bl	8007020 <USBD_LL_StallEP>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
      break;
 80053b0:	bf00      	nop
  }

  return ret;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	460b      	mov	r3, r1
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d16e      	bne.n	80054b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80053da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	f040 8098 	bne.w	8005518 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d913      	bls.n	800541c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4293      	cmp	r3, r2
 800540c:	bf28      	it	cs
 800540e:	4613      	movcs	r3, r2
 8005410:	461a      	mov	r2, r3
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f001 f9b2 	bl	800677e <USBD_CtlContinueRx>
 800541a:	e07d      	b.n	8005518 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2b02      	cmp	r3, #2
 8005428:	d014      	beq.n	8005454 <USBD_LL_DataOutStage+0x98>
 800542a:	2b02      	cmp	r3, #2
 800542c:	d81d      	bhi.n	800546a <USBD_LL_DataOutStage+0xae>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <USBD_LL_DataOutStage+0x7c>
 8005432:	2b01      	cmp	r3, #1
 8005434:	d003      	beq.n	800543e <USBD_LL_DataOutStage+0x82>
 8005436:	e018      	b.n	800546a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	75bb      	strb	r3, [r7, #22]
            break;
 800543c:	e018      	b.n	8005470 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fa64 	bl	8005916 <USBD_CoreFindIF>
 800544e:	4603      	mov	r3, r0
 8005450:	75bb      	strb	r3, [r7, #22]
            break;
 8005452:	e00d      	b.n	8005470 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fa66 	bl	8005930 <USBD_CoreFindEP>
 8005464:	4603      	mov	r3, r0
 8005466:	75bb      	strb	r3, [r7, #22]
            break;
 8005468:	e002      	b.n	8005470 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	75bb      	strb	r3, [r7, #22]
            break;
 800546e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005470:	7dbb      	ldrb	r3, [r7, #22]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d119      	bne.n	80054aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d113      	bne.n	80054aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005482:	7dba      	ldrb	r2, [r7, #22]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	32ae      	adds	r2, #174	@ 0xae
 8005488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005492:	7dba      	ldrb	r2, [r7, #22]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800549a:	7dba      	ldrb	r2, [r7, #22]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	32ae      	adds	r2, #174	@ 0xae
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f001 f978 	bl	80067a0 <USBD_CtlSendStatus>
 80054b0:	e032      	b.n	8005518 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80054b2:	7afb      	ldrb	r3, [r7, #11]
 80054b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	4619      	mov	r1, r3
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fa37 	bl	8005930 <USBD_CoreFindEP>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054c6:	7dbb      	ldrb	r3, [r7, #22]
 80054c8:	2bff      	cmp	r3, #255	@ 0xff
 80054ca:	d025      	beq.n	8005518 <USBD_LL_DataOutStage+0x15c>
 80054cc:	7dbb      	ldrb	r3, [r7, #22]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d122      	bne.n	8005518 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d117      	bne.n	800550e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80054de:	7dba      	ldrb	r2, [r7, #22]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	32ae      	adds	r2, #174	@ 0xae
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00f      	beq.n	800550e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80054ee:	7dba      	ldrb	r2, [r7, #22]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80054f6:	7dba      	ldrb	r2, [r7, #22]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	32ae      	adds	r2, #174	@ 0xae
 80054fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	7afa      	ldrb	r2, [r7, #11]
 8005504:	4611      	mov	r1, r2
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	4798      	blx	r3
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	e000      	b.n	800551a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	460b      	mov	r3, r1
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005530:	7afb      	ldrb	r3, [r7, #11]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d16f      	bne.n	8005616 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3314      	adds	r3, #20
 800553a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005542:	2b02      	cmp	r3, #2
 8005544:	d15a      	bne.n	80055fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	429a      	cmp	r2, r3
 8005550:	d914      	bls.n	800557c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	461a      	mov	r2, r3
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f001 f8da 	bl	8006722 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800556e:	2300      	movs	r3, #0
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f001 fdfd 	bl	8007174 <USBD_LL_PrepareReceive>
 800557a:	e03f      	b.n	80055fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d11c      	bne.n	80055c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005590:	429a      	cmp	r2, r3
 8005592:	d316      	bcc.n	80055c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800559e:	429a      	cmp	r2, r3
 80055a0:	d20f      	bcs.n	80055c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055a2:	2200      	movs	r2, #0
 80055a4:	2100      	movs	r1, #0
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 f8bb 	bl	8006722 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055b4:	2300      	movs	r3, #0
 80055b6:	2200      	movs	r2, #0
 80055b8:	2100      	movs	r1, #0
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f001 fdda 	bl	8007174 <USBD_LL_PrepareReceive>
 80055c0:	e01c      	b.n	80055fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d10f      	bne.n	80055ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f001 fd15 	bl	8007020 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 f8e5 	bl	80067c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03a      	beq.n	800567c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fe42 	bl	8005290 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005614:	e032      	b.n	800567c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f985 	bl	8005930 <USBD_CoreFindEP>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2bff      	cmp	r3, #255	@ 0xff
 800562e:	d025      	beq.n	800567c <USBD_LL_DataInStage+0x15a>
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d122      	bne.n	800567c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b03      	cmp	r3, #3
 8005640:	d11c      	bne.n	800567c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005642:	7dfa      	ldrb	r2, [r7, #23]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	32ae      	adds	r2, #174	@ 0xae
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d014      	beq.n	800567c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005652:	7dfa      	ldrb	r2, [r7, #23]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800565a:	7dfa      	ldrb	r2, [r7, #23]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	32ae      	adds	r2, #174	@ 0xae
 8005660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	7afa      	ldrb	r2, [r7, #11]
 8005668:	4611      	mov	r1, r2
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005672:	7dbb      	ldrb	r3, [r7, #22]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005678:	7dbb      	ldrb	r3, [r7, #22]
 800567a:	e000      	b.n	800567e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d014      	beq.n	80056ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6852      	ldr	r2, [r2, #4]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	4611      	mov	r1, r2
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056ec:	2340      	movs	r3, #64	@ 0x40
 80056ee:	2200      	movs	r2, #0
 80056f0:	2100      	movs	r1, #0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fc4f 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2240      	movs	r2, #64	@ 0x40
 8005704:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005708:	2340      	movs	r3, #64	@ 0x40
 800570a:	2200      	movs	r2, #0
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fc41 	bl	8006f96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2240      	movs	r2, #64	@ 0x40
 800571e:	621a      	str	r2, [r3, #32]

  return ret;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b04      	cmp	r3, #4
 800575c:	d006      	beq.n	800576c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2204      	movs	r2, #4
 8005770:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b04      	cmp	r3, #4
 8005794:	d106      	bne.n	80057a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800579c:	b2da      	uxtb	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d110      	bne.n	80057e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32ae      	adds	r2, #174	@ 0xae
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e01c      	b.n	800584e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d115      	bne.n	800584c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32ae      	adds	r2, #174	@ 0xae
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	32ae      	adds	r2, #174	@ 0xae
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	4611      	mov	r1, r2
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	32ae      	adds	r2, #174	@ 0xae
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005874:	2303      	movs	r3, #3
 8005876:	e01c      	b.n	80058b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b03      	cmp	r3, #3
 8005882:	d115      	bne.n	80058b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	@ 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32ae      	adds	r2, #174	@ 0xae
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	4611      	mov	r1, r2
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6852      	ldr	r2, [r2, #4]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	4611      	mov	r1, r2
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005922:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800593c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	b29b      	uxth	r3, r3
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	4293      	cmp	r3, r2
 800596e:	d91f      	bls.n	80059b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005976:	e013      	b.n	80059a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005978:	f107 030a 	add.w	r3, r7, #10
 800597c:	4619      	mov	r1, r3
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f000 f81b 	bl	80059ba <USBD_GetNextDesc>
 8005984:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d108      	bne.n	80059a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	789b      	ldrb	r3, [r3, #2]
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	429a      	cmp	r2, r3
 800599a:	d008      	beq.n	80059ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d8e5      	bhi.n	8005978 <USBD_GetEpDesc+0x2e>
 80059ac:	e000      	b.n	80059b0 <USBD_GetEpDesc+0x66>
          break;
 80059ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80059b0:	693b      	ldr	r3, [r7, #16]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	4413      	add	r3, r2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3301      	adds	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a10:	8a3b      	ldrh	r3, [r7, #16]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a20:	89fb      	ldrh	r3, [r7, #14]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a46:	2b40      	cmp	r3, #64	@ 0x40
 8005a48:	d005      	beq.n	8005a56 <USBD_StdDevReq+0x26>
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d857      	bhi.n	8005afe <USBD_StdDevReq+0xce>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <USBD_StdDevReq+0x42>
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d153      	bne.n	8005afe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	32ae      	adds	r2, #174	@ 0xae
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e04a      	b.n	8005b08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	d83b      	bhi.n	8005af2 <USBD_StdDevReq+0xc2>
 8005a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a80 <USBD_StdDevReq+0x50>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005ae9 	.word	0x08005ae9
 8005a88:	08005af3 	.word	0x08005af3
 8005a8c:	08005adf 	.word	0x08005adf
 8005a90:	08005af3 	.word	0x08005af3
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005af3 	.word	0x08005af3
 8005aa0:	08005acb 	.word	0x08005acb
 8005aa4:	08005abd 	.word	0x08005abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa3c 	bl	8005f28 <USBD_GetDescriptor>
          break;
 8005ab0:	e024      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fbcb 	bl	8006250 <USBD_SetAddress>
          break;
 8005aba:	e01f      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fc0a 	bl	80062d8 <USBD_SetConfig>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ac8:	e018      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fcad 	bl	800642c <USBD_GetConfig>
          break;
 8005ad2:	e013      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fcde 	bl	8006498 <USBD_GetStatus>
          break;
 8005adc:	e00e      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fd0d 	bl	8006500 <USBD_SetFeature>
          break;
 8005ae6:	e009      	b.n	8005afc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fd31 	bl	8006552 <USBD_ClrFeature>
          break;
 8005af0:	e004      	b.n	8005afc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fd88 	bl	800660a <USBD_CtlError>
          break;
 8005afa:	bf00      	nop
      }
      break;
 8005afc:	e004      	b.n	8005b08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fd82 	bl	800660a <USBD_CtlError>
      break;
 8005b06:	bf00      	nop
  }

  return ret;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop

08005b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b2a:	2b40      	cmp	r3, #64	@ 0x40
 8005b2c:	d005      	beq.n	8005b3a <USBD_StdItfReq+0x26>
 8005b2e:	2b40      	cmp	r3, #64	@ 0x40
 8005b30:	d852      	bhi.n	8005bd8 <USBD_StdItfReq+0xc4>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <USBD_StdItfReq+0x26>
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d14e      	bne.n	8005bd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d840      	bhi.n	8005bca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	889b      	ldrh	r3, [r3, #4]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d836      	bhi.n	8005bc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	889b      	ldrh	r3, [r3, #4]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fedb 	bl	8005916 <USBD_CoreFindIF>
 8005b60:	4603      	mov	r3, r0
 8005b62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	2bff      	cmp	r3, #255	@ 0xff
 8005b68:	d01d      	beq.n	8005ba6 <USBD_StdItfReq+0x92>
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11a      	bne.n	8005ba6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005b70:	7bba      	ldrb	r2, [r7, #14]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	32ae      	adds	r2, #174	@ 0xae
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005b80:	7bba      	ldrb	r2, [r7, #14]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b88:	7bba      	ldrb	r2, [r7, #14]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	32ae      	adds	r2, #174	@ 0xae
 8005b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b9e:	e004      	b.n	8005baa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ba4:	e001      	b.n	8005baa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	88db      	ldrh	r3, [r3, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d110      	bne.n	8005bd4 <USBD_StdItfReq+0xc0>
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fdf1 	bl	80067a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005bbe:	e009      	b.n	8005bd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fd21 	bl	800660a <USBD_CtlError>
          break;
 8005bc8:	e004      	b.n	8005bd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd1c 	bl	800660a <USBD_CtlError>
          break;
 8005bd2:	e000      	b.n	8005bd6 <USBD_StdItfReq+0xc2>
          break;
 8005bd4:	bf00      	nop
      }
      break;
 8005bd6:	e004      	b.n	8005be2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fd15 	bl	800660a <USBD_CtlError>
      break;
 8005be0:	bf00      	nop
  }

  return ret;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	889b      	ldrh	r3, [r3, #4]
 8005bfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d007      	beq.n	8005c1c <USBD_StdEPReq+0x30>
 8005c0c:	2b40      	cmp	r3, #64	@ 0x40
 8005c0e:	f200 817f 	bhi.w	8005f10 <USBD_StdEPReq+0x324>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02a      	beq.n	8005c6c <USBD_StdEPReq+0x80>
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	f040 817a 	bne.w	8005f10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fe85 	bl	8005930 <USBD_CoreFindEP>
 8005c26:	4603      	mov	r3, r0
 8005c28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c2a:	7b7b      	ldrb	r3, [r7, #13]
 8005c2c:	2bff      	cmp	r3, #255	@ 0xff
 8005c2e:	f000 8174 	beq.w	8005f1a <USBD_StdEPReq+0x32e>
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 8170 	bne.w	8005f1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005c3a:	7b7a      	ldrb	r2, [r7, #13]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005c42:	7b7a      	ldrb	r2, [r7, #13]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	32ae      	adds	r2, #174	@ 0xae
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8163 	beq.w	8005f1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005c54:	7b7a      	ldrb	r2, [r7, #13]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	32ae      	adds	r2, #174	@ 0xae
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c6a:	e156      	b.n	8005f1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d008      	beq.n	8005c86 <USBD_StdEPReq+0x9a>
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	f300 8145 	bgt.w	8005f04 <USBD_StdEPReq+0x318>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 809b 	beq.w	8005db6 <USBD_StdEPReq+0x1ca>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d03c      	beq.n	8005cfe <USBD_StdEPReq+0x112>
 8005c84:	e13e      	b.n	8005f04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d002      	beq.n	8005c98 <USBD_StdEPReq+0xac>
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d016      	beq.n	8005cc4 <USBD_StdEPReq+0xd8>
 8005c96:	e02c      	b.n	8005cf2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <USBD_StdEPReq+0xce>
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	2b80      	cmp	r3, #128	@ 0x80
 8005ca2:	d00a      	beq.n	8005cba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f9b9 	bl	8007020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cae:	2180      	movs	r1, #128	@ 0x80
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f9b5 	bl	8007020 <USBD_LL_StallEP>
 8005cb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cb8:	e020      	b.n	8005cfc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fca4 	bl	800660a <USBD_CtlError>
              break;
 8005cc2:	e01b      	b.n	8005cfc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	885b      	ldrh	r3, [r3, #2]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10e      	bne.n	8005cea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <USBD_StdEPReq+0xfe>
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b80      	cmp	r3, #128	@ 0x80
 8005cd6:	d008      	beq.n	8005cea <USBD_StdEPReq+0xfe>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	88db      	ldrh	r3, [r3, #6]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f99b 	bl	8007020 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fd58 	bl	80067a0 <USBD_CtlSendStatus>

              break;
 8005cf0:	e004      	b.n	8005cfc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fc88 	bl	800660a <USBD_CtlError>
              break;
 8005cfa:	bf00      	nop
          }
          break;
 8005cfc:	e107      	b.n	8005f0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d002      	beq.n	8005d10 <USBD_StdEPReq+0x124>
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d016      	beq.n	8005d3c <USBD_StdEPReq+0x150>
 8005d0e:	e04b      	b.n	8005da8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00d      	beq.n	8005d32 <USBD_StdEPReq+0x146>
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b80      	cmp	r3, #128	@ 0x80
 8005d1a:	d00a      	beq.n	8005d32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f97d 	bl	8007020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d26:	2180      	movs	r1, #128	@ 0x80
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 f979 	bl	8007020 <USBD_LL_StallEP>
 8005d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d30:	e040      	b.n	8005db4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc68 	bl	800660a <USBD_CtlError>
              break;
 8005d3a:	e03b      	b.n	8005db4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	885b      	ldrh	r3, [r3, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d136      	bne.n	8005db2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 f983 	bl	800705e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fd21 	bl	80067a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fde4 	bl	8005930 <USBD_CoreFindEP>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d6c:	7b7b      	ldrb	r3, [r7, #13]
 8005d6e:	2bff      	cmp	r3, #255	@ 0xff
 8005d70:	d01f      	beq.n	8005db2 <USBD_StdEPReq+0x1c6>
 8005d72:	7b7b      	ldrb	r3, [r7, #13]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11c      	bne.n	8005db2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005d78:	7b7a      	ldrb	r2, [r7, #13]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005d80:	7b7a      	ldrb	r2, [r7, #13]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	32ae      	adds	r2, #174	@ 0xae
 8005d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d90:	7b7a      	ldrb	r2, [r7, #13]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	32ae      	adds	r2, #174	@ 0xae
 8005d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005da6:	e004      	b.n	8005db2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc2d 	bl	800660a <USBD_CtlError>
              break;
 8005db0:	e000      	b.n	8005db4 <USBD_StdEPReq+0x1c8>
              break;
 8005db2:	bf00      	nop
          }
          break;
 8005db4:	e0ab      	b.n	8005f0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d002      	beq.n	8005dc8 <USBD_StdEPReq+0x1dc>
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d032      	beq.n	8005e2c <USBD_StdEPReq+0x240>
 8005dc6:	e097      	b.n	8005ef8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <USBD_StdEPReq+0x1f2>
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	2b80      	cmp	r3, #128	@ 0x80
 8005dd2:	d004      	beq.n	8005dde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fc17 	bl	800660a <USBD_CtlError>
                break;
 8005ddc:	e091      	b.n	8005f02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da0b      	bge.n	8005dfe <USBD_StdEPReq+0x212>
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	3310      	adds	r3, #16
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	e00b      	b.n	8005e16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	3304      	adds	r3, #4
 8005e16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2202      	movs	r2, #2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc61 	bl	80066ec <USBD_CtlSendData>
              break;
 8005e2a:	e06a      	b.n	8005f02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da11      	bge.n	8005e58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	3324      	adds	r3, #36	@ 0x24
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d117      	bne.n	8005e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fbda 	bl	800660a <USBD_CtlError>
                  break;
 8005e56:	e054      	b.n	8005f02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	f003 020f 	and.w	r2, r3, #15
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fbc7 	bl	800660a <USBD_CtlError>
                  break;
 8005e7c:	e041      	b.n	8005f02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da0b      	bge.n	8005e9e <USBD_StdEPReq+0x2b2>
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	3310      	adds	r3, #16
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	e00b      	b.n	8005eb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <USBD_StdEPReq+0x2d8>
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d103      	bne.n	8005ecc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e00e      	b.n	8005eea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 f8e3 	bl	800709c <USBD_LL_IsStallEP>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2202      	movs	r2, #2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fbfb 	bl	80066ec <USBD_CtlSendData>
              break;
 8005ef6:	e004      	b.n	8005f02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb85 	bl	800660a <USBD_CtlError>
              break;
 8005f00:	bf00      	nop
          }
          break;
 8005f02:	e004      	b.n	8005f0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb7f 	bl	800660a <USBD_CtlError>
          break;
 8005f0c:	bf00      	nop
      }
      break;
 8005f0e:	e005      	b.n	8005f1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb79 	bl	800660a <USBD_CtlError>
      break;
 8005f18:	e000      	b.n	8005f1c <USBD_StdEPReq+0x330>
      break;
 8005f1a:	bf00      	nop
  }

  return ret;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	2b0e      	cmp	r3, #14
 8005f4a:	f200 8152 	bhi.w	80061f2 <USBD_GetDescriptor+0x2ca>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <USBD_GetDescriptor+0x2c>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005fc5 	.word	0x08005fc5
 8005f58:	08005fdd 	.word	0x08005fdd
 8005f5c:	0800601d 	.word	0x0800601d
 8005f60:	080061f3 	.word	0x080061f3
 8005f64:	080061f3 	.word	0x080061f3
 8005f68:	08006193 	.word	0x08006193
 8005f6c:	080061bf 	.word	0x080061bf
 8005f70:	080061f3 	.word	0x080061f3
 8005f74:	080061f3 	.word	0x080061f3
 8005f78:	080061f3 	.word	0x080061f3
 8005f7c:	080061f3 	.word	0x080061f3
 8005f80:	080061f3 	.word	0x080061f3
 8005f84:	080061f3 	.word	0x080061f3
 8005f88:	080061f3 	.word	0x080061f3
 8005f8c:	08005f91 	.word	0x08005f91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	7c12      	ldrb	r2, [r2, #16]
 8005fa8:	f107 0108 	add.w	r1, r7, #8
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fb2:	e126      	b.n	8006202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb27 	bl	800660a <USBD_CtlError>
        err++;
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	72fb      	strb	r3, [r7, #11]
      break;
 8005fc2:	e11e      	b.n	8006202 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7c12      	ldrb	r2, [r2, #16]
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	60f8      	str	r0, [r7, #12]
      break;
 8005fda:	e112      	b.n	8006202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f107 0208 	add.w	r2, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ffe:	e100      	b.n	8006202 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e0f2      	b.n	8006202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	885b      	ldrh	r3, [r3, #2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b05      	cmp	r3, #5
 8006024:	f200 80ac 	bhi.w	8006180 <USBD_GetDescriptor+0x258>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <USBD_GetDescriptor+0x108>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006049 	.word	0x08006049
 8006034:	0800607d 	.word	0x0800607d
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060e5 	.word	0x080060e5
 8006040:	08006119 	.word	0x08006119
 8006044:	0800614d 	.word	0x0800614d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e091      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 facb 	bl	800660a <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e089      	b.n	8006190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e077      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fab1 	bl	800660a <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e06f      	b.n	8006190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e05d      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa97 	bl	800660a <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e055      	b.n	8006190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e043      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa7d 	bl	800660a <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e03b      	b.n	8006190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e029      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa63 	bl	800660a <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e021      	b.n	8006190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e00f      	b.n	8006190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa49 	bl	800660a <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e007      	b.n	8006190 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa41 	bl	800660a <USBD_CtlError>
          err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800618e:	bf00      	nop
      }
      break;
 8006190:	e037      	b.n	8006202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	4610      	mov	r0, r2
 80061a8:	4798      	blx	r3
 80061aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061ac:	e029      	b.n	8006202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa2a 	bl	800660a <USBD_CtlError>
        err++;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	3301      	adds	r3, #1
 80061ba:	72fb      	strb	r3, [r7, #11]
      break;
 80061bc:	e021      	b.n	8006202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10d      	bne.n	80061e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
 80061d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	2207      	movs	r2, #7
 80061de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e00f      	b.n	8006202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa10 	bl	800660a <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e007      	b.n	8006202 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa08 	bl	800660a <USBD_CtlError>
      err++;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3301      	adds	r3, #1
 80061fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006200:	bf00      	nop
  }

  if (err != 0U)
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11e      	bne.n	8006246 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d016      	beq.n	800623e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	88da      	ldrh	r2, [r3, #6]
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	4293      	cmp	r3, r2
 800621e:	bf28      	it	cs
 8006220:	4613      	movcs	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	461a      	mov	r2, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa5d 	bl	80066ec <USBD_CtlSendData>
 8006232:	e009      	b.n	8006248 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9e7 	bl	800660a <USBD_CtlError>
 800623c:	e004      	b.n	8006248 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 faae 	bl	80067a0 <USBD_CtlSendStatus>
 8006244:	e000      	b.n	8006248 <USBD_GetDescriptor+0x320>
    return;
 8006246:	bf00      	nop
  }
}
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	889b      	ldrh	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d131      	bne.n	80062c6 <USBD_SetAddress+0x76>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d12d      	bne.n	80062c6 <USBD_SetAddress+0x76>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	885b      	ldrh	r3, [r3, #2]
 800626e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006270:	d829      	bhi.n	80062c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	885b      	ldrh	r3, [r3, #2]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d104      	bne.n	8006294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9bc 	bl	800660a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	e01d      	b.n	80062d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7bfa      	ldrb	r2, [r7, #15]
 8006298:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 ff27 	bl	80070f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa7a 	bl	80067a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ba:	e009      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	e004      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f99e 	bl	800660a <USBD_CtlError>
  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	885b      	ldrh	r3, [r3, #2]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006428 <USBD_SetConfig+0x150>)
 80062ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006428 <USBD_SetConfig+0x150>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d905      	bls.n	8006304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f985 	bl	800660a <USBD_CtlError>
    return USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e08c      	b.n	800641e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d002      	beq.n	8006316 <USBD_SetConfig+0x3e>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d029      	beq.n	8006368 <USBD_SetConfig+0x90>
 8006314:	e075      	b.n	8006402 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006316:	4b44      	ldr	r3, [pc, #272]	@ (8006428 <USBD_SetConfig+0x150>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800631e:	4b42      	ldr	r3, [pc, #264]	@ (8006428 <USBD_SetConfig+0x150>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006328:	4b3f      	ldr	r3, [pc, #252]	@ (8006428 <USBD_SetConfig+0x150>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fe ffb9 	bl	80052a6 <USBD_SetClassConfig>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f962 	bl	800660a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800634e:	e065      	b.n	800641c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa25 	bl	80067a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2203      	movs	r2, #3
 800635a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800635e:	e05d      	b.n	800641c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa1d 	bl	80067a0 <USBD_CtlSendStatus>
      break;
 8006366:	e059      	b.n	800641c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006368:	4b2f      	ldr	r3, [pc, #188]	@ (8006428 <USBD_SetConfig+0x150>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d112      	bne.n	8006396 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006378:	4b2b      	ldr	r3, [pc, #172]	@ (8006428 <USBD_SetConfig+0x150>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006382:	4b29      	ldr	r3, [pc, #164]	@ (8006428 <USBD_SetConfig+0x150>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fe ffa8 	bl	80052de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa06 	bl	80067a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006394:	e042      	b.n	800641c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006396:	4b24      	ldr	r3, [pc, #144]	@ (8006428 <USBD_SetConfig+0x150>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d02a      	beq.n	80063fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fe ff96 	bl	80052de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <USBD_SetConfig+0x150>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006428 <USBD_SetConfig+0x150>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fe ff6f 	bl	80052a6 <USBD_SetClassConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f918 	bl	800660a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fe ff7b 	bl	80052de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80063f0:	e014      	b.n	800641c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9d4 	bl	80067a0 <USBD_CtlSendStatus>
      break;
 80063f8:	e010      	b.n	800641c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9d0 	bl	80067a0 <USBD_CtlSendStatus>
      break;
 8006400:	e00c      	b.n	800641c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f900 	bl	800660a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800640a:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <USBD_SetConfig+0x150>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fe ff64 	bl	80052de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006416:	2303      	movs	r3, #3
 8006418:	73fb      	strb	r3, [r7, #15]
      break;
 800641a:	bf00      	nop
  }

  return ret;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000180 	.word	0x20000180

0800642c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d004      	beq.n	8006448 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8e2 	bl	800660a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006446:	e023      	b.n	8006490 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	dc02      	bgt.n	800645a <USBD_GetConfig+0x2e>
 8006454:	2b00      	cmp	r3, #0
 8006456:	dc03      	bgt.n	8006460 <USBD_GetConfig+0x34>
 8006458:	e015      	b.n	8006486 <USBD_GetConfig+0x5a>
 800645a:	2b03      	cmp	r3, #3
 800645c:	d00b      	beq.n	8006476 <USBD_GetConfig+0x4a>
 800645e:	e012      	b.n	8006486 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3308      	adds	r3, #8
 800646a:	2201      	movs	r2, #1
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f93c 	bl	80066ec <USBD_CtlSendData>
        break;
 8006474:	e00c      	b.n	8006490 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	2201      	movs	r2, #1
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f934 	bl	80066ec <USBD_CtlSendData>
        break;
 8006484:	e004      	b.n	8006490 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8be 	bl	800660a <USBD_CtlError>
        break;
 800648e:	bf00      	nop
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d81e      	bhi.n	80064ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d004      	beq.n	80064c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8a5 	bl	800660a <USBD_CtlError>
        break;
 80064c0:	e01a      	b.n	80064f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f043 0202 	orr.w	r2, r3, #2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	330c      	adds	r3, #12
 80064e2:	2202      	movs	r2, #2
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f900 	bl	80066ec <USBD_CtlSendData>
      break;
 80064ec:	e004      	b.n	80064f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f88a 	bl	800660a <USBD_CtlError>
      break;
 80064f6:	bf00      	nop
  }
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	885b      	ldrh	r3, [r3, #2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f940 	bl	80067a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006520:	e013      	b.n	800654a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d10b      	bne.n	8006542 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	889b      	ldrh	r3, [r3, #4]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	b29b      	uxth	r3, r3
 8006532:	b2da      	uxtb	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f930 	bl	80067a0 <USBD_CtlSendStatus>
}
 8006540:	e003      	b.n	800654a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f860 	bl	800660a <USBD_CtlError>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	2b02      	cmp	r3, #2
 8006568:	d80b      	bhi.n	8006582 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10c      	bne.n	800658c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f910 	bl	80067a0 <USBD_CtlSendStatus>
      }
      break;
 8006580:	e004      	b.n	800658c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f840 	bl	800660a <USBD_CtlError>
      break;
 800658a:	e000      	b.n	800658e <USBD_ClrFeature+0x3c>
      break;
 800658c:	bf00      	nop
  }
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff fa16 	bl	80059f2 <SWAPBYTE>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fa09 	bl	80059f2 <SWAPBYTE>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff f9fc 	bl	80059f2 <SWAPBYTE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	80da      	strh	r2, [r3, #6]
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006614:	2180      	movs	r1, #128	@ 0x80
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fd02 	bl	8007020 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fcfe 	bl	8007020 <USBD_LL_StallEP>
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d036      	beq.n	80066b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f836 	bl	80066b8 <USBD_GetLen>
 800664c:	4603      	mov	r3, r0
 800664e:	3301      	adds	r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4413      	add	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	701a      	strb	r2, [r3, #0]
  idx++;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	3301      	adds	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4413      	add	r3, r2
 8006672:	2203      	movs	r2, #3
 8006674:	701a      	strb	r2, [r3, #0]
  idx++;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	3301      	adds	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800667c:	e013      	b.n	80066a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	4413      	add	r3, r2
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3301      	adds	r3, #1
 800668e:	613b      	str	r3, [r7, #16]
    idx++;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	3301      	adds	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
    idx++;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	3301      	adds	r3, #1
 80066a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e7      	bne.n	800667e <USBD_GetString+0x52>
 80066ae:	e000      	b.n	80066b2 <USBD_GetString+0x86>
    return;
 80066b0:	bf00      	nop
  }
}
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066c8:	e005      	b.n	80066d6 <USBD_GetLen+0x1e>
  {
    len++;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	3301      	adds	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f5      	bne.n	80066ca <USBD_GetLen+0x12>
  }

  return len;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	2100      	movs	r1, #0
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fd0d 	bl	8007132 <USBD_LL_Transmit>

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	2100      	movs	r1, #0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fcfc 	bl	8007132 <USBD_LL_Transmit>

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2203      	movs	r2, #3
 8006754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	2100      	movs	r1, #0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fd00 	bl	8007174 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fcef 	bl	8007174 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2204      	movs	r2, #4
 80067ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067b0:	2300      	movs	r3, #0
 80067b2:	2200      	movs	r2, #0
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fcbb 	bl	8007132 <USBD_LL_Transmit>

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2205      	movs	r2, #5
 80067d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fcc9 	bl	8007174 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80067f0:	2200      	movs	r2, #0
 80067f2:	4912      	ldr	r1, [pc, #72]	@ (800683c <MX_USB_DEVICE_Init+0x50>)
 80067f4:	4812      	ldr	r0, [pc, #72]	@ (8006840 <MX_USB_DEVICE_Init+0x54>)
 80067f6:	f7fe fcd9 	bl	80051ac <USBD_Init>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006800:	f7f9 ffd4 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006804:	490f      	ldr	r1, [pc, #60]	@ (8006844 <MX_USB_DEVICE_Init+0x58>)
 8006806:	480e      	ldr	r0, [pc, #56]	@ (8006840 <MX_USB_DEVICE_Init+0x54>)
 8006808:	f7fe fd00 	bl	800520c <USBD_RegisterClass>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006812:	f7f9 ffcb 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006816:	490c      	ldr	r1, [pc, #48]	@ (8006848 <MX_USB_DEVICE_Init+0x5c>)
 8006818:	4809      	ldr	r0, [pc, #36]	@ (8006840 <MX_USB_DEVICE_Init+0x54>)
 800681a:	f7fe fbf7 	bl	800500c <USBD_CDC_RegisterInterface>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006824:	f7f9 ffc2 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006828:	4805      	ldr	r0, [pc, #20]	@ (8006840 <MX_USB_DEVICE_Init+0x54>)
 800682a:	f7fe fd25 	bl	8005278 <USBD_Start>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006834:	f7f9 ffba 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006838:	bf00      	nop
 800683a:	bd80      	pop	{r7, pc}
 800683c:	200000ac 	.word	0x200000ac
 8006840:	20000184 	.word	0x20000184
 8006844:	20000018 	.word	0x20000018
 8006848:	20000098 	.word	0x20000098

0800684c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	4905      	ldr	r1, [pc, #20]	@ (8006868 <CDC_Init_FS+0x1c>)
 8006854:	4805      	ldr	r0, [pc, #20]	@ (800686c <CDC_Init_FS+0x20>)
 8006856:	f7fe fbf3 	bl	8005040 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800685a:	4905      	ldr	r1, [pc, #20]	@ (8006870 <CDC_Init_FS+0x24>)
 800685c:	4803      	ldr	r0, [pc, #12]	@ (800686c <CDC_Init_FS+0x20>)
 800685e:	f7fe fc11 	bl	8005084 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000c60 	.word	0x20000c60
 800686c:	20000184 	.word	0x20000184
 8006870:	20000460 	.word	0x20000460

08006874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]
 8006890:	4613      	mov	r3, r2
 8006892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b23      	cmp	r3, #35	@ 0x23
 8006898:	d84a      	bhi.n	8006930 <CDC_Control_FS+0xac>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <CDC_Control_FS+0x1c>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	08006931 	.word	0x08006931
 80068a4:	08006931 	.word	0x08006931
 80068a8:	08006931 	.word	0x08006931
 80068ac:	08006931 	.word	0x08006931
 80068b0:	08006931 	.word	0x08006931
 80068b4:	08006931 	.word	0x08006931
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006931 	.word	0x08006931
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006931 	.word	0x08006931
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006931 	.word	0x08006931
 80068f4:	08006931 	.word	0x08006931
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006931 	.word	0x08006931
 8006904:	08006931 	.word	0x08006931
 8006908:	08006931 	.word	0x08006931
 800690c:	08006931 	.word	0x08006931
 8006910:	08006931 	.word	0x08006931
 8006914:	08006931 	.word	0x08006931
 8006918:	08006931 	.word	0x08006931
 800691c:	08006931 	.word	0x08006931
 8006920:	08006931 	.word	0x08006931
 8006924:	08006931 	.word	0x08006931
 8006928:	08006931 	.word	0x08006931
 800692c:	08006931 	.word	0x08006931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006930:	bf00      	nop
  }

  return (USBD_OK);
 8006932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4805      	ldr	r0, [pc, #20]	@ (8006964 <CDC_Receive_FS+0x24>)
 800694e:	f7fe fb99 	bl	8005084 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006952:	4804      	ldr	r0, [pc, #16]	@ (8006964 <CDC_Receive_FS+0x24>)
 8006954:	f7fe fbf4 	bl	8005140 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000184 	.word	0x20000184

08006968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006978:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <CDC_Transmit_FS+0x48>)
 800697a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800697e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800698a:	2301      	movs	r3, #1
 800698c:	e00b      	b.n	80069a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800698e:	887b      	ldrh	r3, [r7, #2]
 8006990:	461a      	mov	r2, r3
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4806      	ldr	r0, [pc, #24]	@ (80069b0 <CDC_Transmit_FS+0x48>)
 8006996:	f7fe fb53 	bl	8005040 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800699a:	4805      	ldr	r0, [pc, #20]	@ (80069b0 <CDC_Transmit_FS+0x48>)
 800699c:	f7fe fb90 	bl	80050c0 <USBD_CDC_TransmitPacket>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000184 	.word	0x20000184

080069b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80069c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2212      	movs	r2, #18
 80069e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80069ea:	4b03      	ldr	r3, [pc, #12]	@ (80069f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	200000cc 	.word	0x200000cc

080069fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	6039      	str	r1, [r7, #0]
 8006a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a0e:	4b03      	ldr	r3, [pc, #12]	@ (8006a1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	200000ec 	.word	0x200000ec

08006a20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4907      	ldr	r1, [pc, #28]	@ (8006a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a36:	4808      	ldr	r0, [pc, #32]	@ (8006a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a38:	f7ff fdf8 	bl	800662c <USBD_GetString>
 8006a3c:	e004      	b.n	8006a48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4904      	ldr	r1, [pc, #16]	@ (8006a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a42:	4805      	ldr	r0, [pc, #20]	@ (8006a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a44:	f7ff fdf2 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a48:	4b02      	ldr	r3, [pc, #8]	@ (8006a54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20001460 	.word	0x20001460
 8006a58:	08007c90 	.word	0x08007c90

08006a5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	4904      	ldr	r1, [pc, #16]	@ (8006a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a6c:	4804      	ldr	r0, [pc, #16]	@ (8006a80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a6e:	f7ff fddd 	bl	800662c <USBD_GetString>
  return USBD_StrDesc;
 8006a72:	4b02      	ldr	r3, [pc, #8]	@ (8006a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20001460 	.word	0x20001460
 8006a80:	08007ca8 	.word	0x08007ca8

08006a84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	221a      	movs	r2, #26
 8006a94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a96:	f000 f855 	bl	8006b44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a9a:	4b02      	ldr	r3, [pc, #8]	@ (8006aa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	200000f0 	.word	0x200000f0

08006aa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4907      	ldr	r1, [pc, #28]	@ (8006adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006abe:	4808      	ldr	r0, [pc, #32]	@ (8006ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ac0:	f7ff fdb4 	bl	800662c <USBD_GetString>
 8006ac4:	e004      	b.n	8006ad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	4904      	ldr	r1, [pc, #16]	@ (8006adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aca:	4805      	ldr	r0, [pc, #20]	@ (8006ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006acc:	f7ff fdae 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ad0:	4b02      	ldr	r3, [pc, #8]	@ (8006adc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20001460 	.word	0x20001460
 8006ae0:	08007cbc 	.word	0x08007cbc

08006ae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4907      	ldr	r1, [pc, #28]	@ (8006b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006afa:	4808      	ldr	r0, [pc, #32]	@ (8006b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006afc:	f7ff fd96 	bl	800662c <USBD_GetString>
 8006b00:	e004      	b.n	8006b0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4904      	ldr	r1, [pc, #16]	@ (8006b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b06:	4805      	ldr	r0, [pc, #20]	@ (8006b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b08:	f7ff fd90 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	@ (8006b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001460 	.word	0x20001460
 8006b1c:	08007cc8 	.word	0x08007cc8

08006b20 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	220c      	movs	r2, #12
 8006b30:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006b32:	4b03      	ldr	r3, [pc, #12]	@ (8006b40 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	200000e0 	.word	0x200000e0

08006b44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <Get_SerialNum+0x44>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b50:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <Get_SerialNum+0x48>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b56:	4b0e      	ldr	r3, [pc, #56]	@ (8006b90 <Get_SerialNum+0x4c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b6a:	2208      	movs	r2, #8
 8006b6c:	4909      	ldr	r1, [pc, #36]	@ (8006b94 <Get_SerialNum+0x50>)
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f814 	bl	8006b9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b74:	2204      	movs	r2, #4
 8006b76:	4908      	ldr	r1, [pc, #32]	@ (8006b98 <Get_SerialNum+0x54>)
 8006b78:	68b8      	ldr	r0, [r7, #8]
 8006b7a:	f000 f80f 	bl	8006b9c <IntToUnicode>
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	1fff7a10 	.word	0x1fff7a10
 8006b8c:	1fff7a14 	.word	0x1fff7a14
 8006b90:	1fff7a18 	.word	0x1fff7a18
 8006b94:	200000f2 	.word	0x200000f2
 8006b98:	20000102 	.word	0x20000102

08006b9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
 8006bb2:	e027      	b.n	8006c04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	0f1b      	lsrs	r3, r3, #28
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d80b      	bhi.n	8006bd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	0f1b      	lsrs	r3, r3, #28
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	440b      	add	r3, r1
 8006bcc:	3230      	adds	r2, #48	@ 0x30
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e00a      	b.n	8006bea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	0f1b      	lsrs	r3, r3, #28
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4619      	mov	r1, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	440b      	add	r3, r1
 8006be4:	3237      	adds	r2, #55	@ 0x37
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	3301      	adds	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
 8006c04:	7dfa      	ldrb	r2, [r7, #23]
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d3d3      	bcc.n	8006bb4 <IntToUnicode+0x18>
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b098      	sub	sp, #96	@ 0x60
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	60da      	str	r2, [r3, #12]
 8006c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	223c      	movs	r2, #60	@ 0x3c
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fb93 	bl	8007368 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c4a:	d148      	bne.n	8006cde <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c54:	f107 0310 	add.w	r3, r7, #16
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fb fe49 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8006c64:	f7f9 fda2 	bl	80007ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c92:	2303      	movs	r3, #3
 8006c94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c96:	230a      	movs	r3, #10
 8006c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4812      	ldr	r0, [pc, #72]	@ (8006cec <HAL_PCD_MspInit+0xd0>)
 8006ca2:	f7fa f805 	bl	8000cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ca6:	4b10      	ldr	r3, [pc, #64]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006caa:	4a0f      	ldr	r2, [pc, #60]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb0:	6353      	str	r3, [r2, #52]	@ 0x34
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cba:	4a0b      	ldr	r2, [pc, #44]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cc2:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_PCD_MspInit+0xcc>)
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	2043      	movs	r0, #67	@ 0x43
 8006cd4:	f7f9 ffb5 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006cd8:	2043      	movs	r0, #67	@ 0x43
 8006cda:	f7f9 ffce 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006cde:	bf00      	nop
 8006ce0:	3760      	adds	r7, #96	@ 0x60
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40020000 	.word	0x40020000

08006cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fe fb03 	bl	8005312 <USBD_LL_SetupStage>
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fe fb3d 	bl	80053bc <USBD_LL_DataOutStage>
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	3320      	adds	r3, #32
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7fe fbd6 	bl	8005522 <USBD_LL_DataInStage>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fd10 	bl	80057b2 <USBD_LL_SOF>
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	79db      	ldrb	r3, [r3, #7]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d001      	beq.n	8006db2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006dae:	f7f9 fcfd 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fcb4 	bl	800572a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fc5c 	bl	8005686 <USBD_LL_Reset>
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fcaf 	bl	800574a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7adb      	ldrb	r3, [r3, #11]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e0c:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <HAL_PCD_SuspendCallback+0x48>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	4a03      	ldr	r2, [pc, #12]	@ (8006e20 <HAL_PCD_SuspendCallback+0x48>)
 8006e12:	f043 0306 	orr.w	r3, r3, #6
 8006e16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	e000ed00 	.word	0xe000ed00

08006e24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fca5 	bl	8005782 <USBD_LL_Resume>
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fcfd 	bl	8005856 <USBD_LL_IsoOUTIncomplete>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fcb9 	bl	80057f2 <USBD_LL_IsoINIncomplete>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fd0f 	bl	80058ba <USBD_LL_DevConnected>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fd0c 	bl	80058d0 <USBD_LL_DevDisconnected>
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d13f      	bne.n	8006f50 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ed0:	4a22      	ldr	r2, [pc, #136]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a20      	ldr	r2, [pc, #128]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006edc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006ee2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006eea:	2206      	movs	r2, #6
 8006eec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006eee:	4b1b      	ldr	r3, [pc, #108]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ef4:	4b19      	ldr	r3, [pc, #100]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006efa:	4b18      	ldr	r3, [pc, #96]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006efc:	2202      	movs	r2, #2
 8006efe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f00:	4b16      	ldr	r3, [pc, #88]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f06:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006f12:	4b12      	ldr	r3, [pc, #72]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f18:	4b10      	ldr	r3, [pc, #64]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f24:	480d      	ldr	r0, [pc, #52]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f26:	f7fa f850 	bl	8000fca <HAL_PCD_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8006f30:	f7f9 fc3c 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f34:	2180      	movs	r1, #128	@ 0x80
 8006f36:	4809      	ldr	r0, [pc, #36]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f38:	f7fb faaf 	bl	800249a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f3c:	2240      	movs	r2, #64	@ 0x40
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4806      	ldr	r0, [pc, #24]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f42:	f7fb fa63 	bl	800240c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4804      	ldr	r0, [pc, #16]	@ (8006f5c <USBD_LL_Init+0x9c>)
 8006f4c:	f7fb fa5e 	bl	800240c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20001660 	.word	0x20001660

08006f60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fa f93d 	bl	80011f6 <HAL_PCD_Start>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f990 	bl	80072a8 <USBD_Get_USB_Status>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	70fb      	strb	r3, [r7, #3]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70bb      	strb	r3, [r7, #2]
 8006fac:	4613      	mov	r3, r2
 8006fae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006fbe:	78bb      	ldrb	r3, [r7, #2]
 8006fc0:	883a      	ldrh	r2, [r7, #0]
 8006fc2:	78f9      	ldrb	r1, [r7, #3]
 8006fc4:	f7fa fe3e 	bl	8001c44 <HAL_PCD_EP_Open>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f96a 	bl	80072a8 <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f7fa fe87 	bl	8001d14 <HAL_PCD_EP_Close>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f94b 	bl	80072a8 <USBD_Get_USB_Status>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007016:	7bbb      	ldrb	r3, [r7, #14]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fa ff3f 	bl	8001ec2 <HAL_PCD_EP_SetStall>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f92c 	bl	80072a8 <USBD_Get_USB_Status>
 8007050:	4603      	mov	r3, r0
 8007052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007054:	7bbb      	ldrb	r3, [r7, #14]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7fa ff83 	bl	8001f88 <HAL_PCD_EP_ClrStall>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f90d 	bl	80072a8 <USBD_Get_USB_Status>
 800708e:	4603      	mov	r3, r0
 8007090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007092:	7bbb      	ldrb	r3, [r7, #14]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da0b      	bge.n	80070d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	4613      	mov	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3316      	adds	r3, #22
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	e00b      	b.n	80070e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80070e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f7fa fd72 	bl	8001bfc <HAL_PCD_SetAddress>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f8c2 	bl	80072a8 <USBD_Get_USB_Status>
 8007124:	4603      	mov	r3, r0
 8007126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007128:	7bbb      	ldrb	r3, [r7, #14]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	460b      	mov	r3, r1
 8007140:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007150:	7af9      	ldrb	r1, [r7, #11]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f7fa fe7a 	bl	8001e4e <HAL_PCD_EP_Transmit>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f8a1 	bl	80072a8 <USBD_Get_USB_Status>
 8007166:	4603      	mov	r3, r0
 8007168:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800716a:	7dbb      	ldrb	r3, [r7, #22]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	460b      	mov	r3, r1
 8007182:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007192:	7af9      	ldrb	r1, [r7, #11]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	f7fa fe06 	bl	8001da8 <HAL_PCD_EP_Receive>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f880 	bl	80072a8 <USBD_Get_USB_Status>
 80071a8:	4603      	mov	r3, r0
 80071aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fa fe26 	bl	8001e1e <HAL_PCD_EP_GetRxCount>
 80071d2:	4603      	mov	r3, r0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_PCDEx_LPM_Callback+0x18>
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d01f      	beq.n	8007232 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80071f2:	e03b      	b.n	800726c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7adb      	ldrb	r3, [r3, #11]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80071fc:	f7f9 fa1c 	bl	8000638 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007200:	4b1c      	ldr	r3, [pc, #112]	@ (8007274 <HAL_PCDEx_LPM_Callback+0x98>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_PCDEx_LPM_Callback+0x98>)
 8007206:	f023 0306 	bic.w	r3, r3, #6
 800720a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe faa9 	bl	8005782 <USBD_LL_Resume>
    break;
 8007230:	e01c      	b.n	800726c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fa7a 	bl	800574a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7adb      	ldrb	r3, [r3, #11]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800725e:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <HAL_PCDEx_LPM_Callback+0x98>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	4a04      	ldr	r2, [pc, #16]	@ (8007274 <HAL_PCDEx_LPM_Callback+0x98>)
 8007264:	f043 0306 	orr.w	r3, r3, #6
 8007268:	6113      	str	r3, [r2, #16]
    break;
 800726a:	bf00      	nop
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	e000ed00 	.word	0xe000ed00

08007278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007280:	4b03      	ldr	r3, [pc, #12]	@ (8007290 <USBD_static_malloc+0x18>)
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20001b44 	.word	0x20001b44

08007294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d817      	bhi.n	80072ec <USBD_Get_USB_Status+0x44>
 80072bc:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <USBD_Get_USB_Status+0x1c>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072db 	.word	0x080072db
 80072cc:	080072e1 	.word	0x080072e1
 80072d0:	080072e7 	.word	0x080072e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
    break;
 80072d8:	e00b      	b.n	80072f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	73fb      	strb	r3, [r7, #15]
    break;
 80072de:	e008      	b.n	80072f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
    break;
 80072e4:	e005      	b.n	80072f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ea:	e002      	b.n	80072f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
    break;
 80072f0:	bf00      	nop
  }
  return usb_status;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <sniprintf>:
 8007300:	b40c      	push	{r2, r3}
 8007302:	b530      	push	{r4, r5, lr}
 8007304:	4b17      	ldr	r3, [pc, #92]	@ (8007364 <sniprintf+0x64>)
 8007306:	1e0c      	subs	r4, r1, #0
 8007308:	681d      	ldr	r5, [r3, #0]
 800730a:	b09d      	sub	sp, #116	@ 0x74
 800730c:	da08      	bge.n	8007320 <sniprintf+0x20>
 800730e:	238b      	movs	r3, #139	@ 0x8b
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	f04f 30ff 	mov.w	r0, #4294967295
 8007316:	b01d      	add	sp, #116	@ 0x74
 8007318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800731c:	b002      	add	sp, #8
 800731e:	4770      	bx	lr
 8007320:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007324:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007328:	bf14      	ite	ne
 800732a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800732e:	4623      	moveq	r3, r4
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	9307      	str	r3, [sp, #28]
 8007334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007338:	9002      	str	r0, [sp, #8]
 800733a:	9006      	str	r0, [sp, #24]
 800733c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007340:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007342:	ab21      	add	r3, sp, #132	@ 0x84
 8007344:	a902      	add	r1, sp, #8
 8007346:	4628      	mov	r0, r5
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	f000 f995 	bl	8007678 <_svfiprintf_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	bfbc      	itt	lt
 8007352:	238b      	movlt	r3, #139	@ 0x8b
 8007354:	602b      	strlt	r3, [r5, #0]
 8007356:	2c00      	cmp	r4, #0
 8007358:	d0dd      	beq.n	8007316 <sniprintf+0x16>
 800735a:	9b02      	ldr	r3, [sp, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e7d9      	b.n	8007316 <sniprintf+0x16>
 8007362:	bf00      	nop
 8007364:	2000010c 	.word	0x2000010c

08007368 <memset>:
 8007368:	4402      	add	r2, r0
 800736a:	4603      	mov	r3, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <__errno>:
 8007378:	4b01      	ldr	r3, [pc, #4]	@ (8007380 <__errno+0x8>)
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	2000010c 	.word	0x2000010c

08007384 <__libc_init_array>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4d0d      	ldr	r5, [pc, #52]	@ (80073bc <__libc_init_array+0x38>)
 8007388:	4c0d      	ldr	r4, [pc, #52]	@ (80073c0 <__libc_init_array+0x3c>)
 800738a:	1b64      	subs	r4, r4, r5
 800738c:	10a4      	asrs	r4, r4, #2
 800738e:	2600      	movs	r6, #0
 8007390:	42a6      	cmp	r6, r4
 8007392:	d109      	bne.n	80073a8 <__libc_init_array+0x24>
 8007394:	4d0b      	ldr	r5, [pc, #44]	@ (80073c4 <__libc_init_array+0x40>)
 8007396:	4c0c      	ldr	r4, [pc, #48]	@ (80073c8 <__libc_init_array+0x44>)
 8007398:	f000 fc66 	bl	8007c68 <_init>
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	2600      	movs	r6, #0
 80073a2:	42a6      	cmp	r6, r4
 80073a4:	d105      	bne.n	80073b2 <__libc_init_array+0x2e>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ac:	4798      	blx	r3
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7ee      	b.n	8007390 <__libc_init_array+0xc>
 80073b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b6:	4798      	blx	r3
 80073b8:	3601      	adds	r6, #1
 80073ba:	e7f2      	b.n	80073a2 <__libc_init_array+0x1e>
 80073bc:	08007d24 	.word	0x08007d24
 80073c0:	08007d24 	.word	0x08007d24
 80073c4:	08007d24 	.word	0x08007d24
 80073c8:	08007d28 	.word	0x08007d28

080073cc <__retarget_lock_acquire_recursive>:
 80073cc:	4770      	bx	lr

080073ce <__retarget_lock_release_recursive>:
 80073ce:	4770      	bx	lr

080073d0 <_free_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d041      	beq.n	800745c <_free_r+0x8c>
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f0c      	subs	r4, r1, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f000 f8e0 	bl	80075a8 <__malloc_lock>
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <_free_r+0x90>)
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x2c>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f8:	f000 b8dc 	b.w	80075b4 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x42>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x1e>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x4c>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x42>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1850      	adds	r0, r2, r1
 8007420:	42a0      	cmp	r0, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x6c>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	4401      	add	r1, r0
 8007428:	1850      	adds	r0, r2, r1
 800742a:	4283      	cmp	r3, r0
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x22>
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4408      	add	r0, r1
 8007438:	6010      	str	r0, [r2, #0]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x22>
 800743c:	d902      	bls.n	8007444 <_free_r+0x74>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x22>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1809      	addeq	r1, r1, r0
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7ca      	b.n	80073f2 <_free_r+0x22>
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	20001ea8 	.word	0x20001ea8

08007464 <sbrk_aligned>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4e0f      	ldr	r6, [pc, #60]	@ (80074a4 <sbrk_aligned+0x40>)
 8007468:	460c      	mov	r4, r1
 800746a:	6831      	ldr	r1, [r6, #0]
 800746c:	4605      	mov	r5, r0
 800746e:	b911      	cbnz	r1, 8007476 <sbrk_aligned+0x12>
 8007470:	f000 fba6 	bl	8007bc0 <_sbrk_r>
 8007474:	6030      	str	r0, [r6, #0]
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 fba1 	bl	8007bc0 <_sbrk_r>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d103      	bne.n	800748a <sbrk_aligned+0x26>
 8007482:	f04f 34ff 	mov.w	r4, #4294967295
 8007486:	4620      	mov	r0, r4
 8007488:	bd70      	pop	{r4, r5, r6, pc}
 800748a:	1cc4      	adds	r4, r0, #3
 800748c:	f024 0403 	bic.w	r4, r4, #3
 8007490:	42a0      	cmp	r0, r4
 8007492:	d0f8      	beq.n	8007486 <sbrk_aligned+0x22>
 8007494:	1a21      	subs	r1, r4, r0
 8007496:	4628      	mov	r0, r5
 8007498:	f000 fb92 	bl	8007bc0 <_sbrk_r>
 800749c:	3001      	adds	r0, #1
 800749e:	d1f2      	bne.n	8007486 <sbrk_aligned+0x22>
 80074a0:	e7ef      	b.n	8007482 <sbrk_aligned+0x1e>
 80074a2:	bf00      	nop
 80074a4:	20001ea4 	.word	0x20001ea4

080074a8 <_malloc_r>:
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ac:	1ccd      	adds	r5, r1, #3
 80074ae:	f025 0503 	bic.w	r5, r5, #3
 80074b2:	3508      	adds	r5, #8
 80074b4:	2d0c      	cmp	r5, #12
 80074b6:	bf38      	it	cc
 80074b8:	250c      	movcc	r5, #12
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	4606      	mov	r6, r0
 80074be:	db01      	blt.n	80074c4 <_malloc_r+0x1c>
 80074c0:	42a9      	cmp	r1, r5
 80074c2:	d904      	bls.n	80074ce <_malloc_r+0x26>
 80074c4:	230c      	movs	r3, #12
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	2000      	movs	r0, #0
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075a4 <_malloc_r+0xfc>
 80074d2:	f000 f869 	bl	80075a8 <__malloc_lock>
 80074d6:	f8d8 3000 	ldr.w	r3, [r8]
 80074da:	461c      	mov	r4, r3
 80074dc:	bb44      	cbnz	r4, 8007530 <_malloc_r+0x88>
 80074de:	4629      	mov	r1, r5
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff ffbf 	bl	8007464 <sbrk_aligned>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	4604      	mov	r4, r0
 80074ea:	d158      	bne.n	800759e <_malloc_r+0xf6>
 80074ec:	f8d8 4000 	ldr.w	r4, [r8]
 80074f0:	4627      	mov	r7, r4
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	d143      	bne.n	800757e <_malloc_r+0xd6>
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	d04b      	beq.n	8007592 <_malloc_r+0xea>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	4639      	mov	r1, r7
 80074fe:	4630      	mov	r0, r6
 8007500:	eb04 0903 	add.w	r9, r4, r3
 8007504:	f000 fb5c 	bl	8007bc0 <_sbrk_r>
 8007508:	4581      	cmp	r9, r0
 800750a:	d142      	bne.n	8007592 <_malloc_r+0xea>
 800750c:	6821      	ldr	r1, [r4, #0]
 800750e:	1a6d      	subs	r5, r5, r1
 8007510:	4629      	mov	r1, r5
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff ffa6 	bl	8007464 <sbrk_aligned>
 8007518:	3001      	adds	r0, #1
 800751a:	d03a      	beq.n	8007592 <_malloc_r+0xea>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	442b      	add	r3, r5
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	f8d8 3000 	ldr.w	r3, [r8]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	bb62      	cbnz	r2, 8007584 <_malloc_r+0xdc>
 800752a:	f8c8 7000 	str.w	r7, [r8]
 800752e:	e00f      	b.n	8007550 <_malloc_r+0xa8>
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	1b52      	subs	r2, r2, r5
 8007534:	d420      	bmi.n	8007578 <_malloc_r+0xd0>
 8007536:	2a0b      	cmp	r2, #11
 8007538:	d917      	bls.n	800756a <_malloc_r+0xc2>
 800753a:	1961      	adds	r1, r4, r5
 800753c:	42a3      	cmp	r3, r4
 800753e:	6025      	str	r5, [r4, #0]
 8007540:	bf18      	it	ne
 8007542:	6059      	strne	r1, [r3, #4]
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	bf08      	it	eq
 8007548:	f8c8 1000 	streq.w	r1, [r8]
 800754c:	5162      	str	r2, [r4, r5]
 800754e:	604b      	str	r3, [r1, #4]
 8007550:	4630      	mov	r0, r6
 8007552:	f000 f82f 	bl	80075b4 <__malloc_unlock>
 8007556:	f104 000b 	add.w	r0, r4, #11
 800755a:	1d23      	adds	r3, r4, #4
 800755c:	f020 0007 	bic.w	r0, r0, #7
 8007560:	1ac2      	subs	r2, r0, r3
 8007562:	bf1c      	itt	ne
 8007564:	1a1b      	subne	r3, r3, r0
 8007566:	50a3      	strne	r3, [r4, r2]
 8007568:	e7af      	b.n	80074ca <_malloc_r+0x22>
 800756a:	6862      	ldr	r2, [r4, #4]
 800756c:	42a3      	cmp	r3, r4
 800756e:	bf0c      	ite	eq
 8007570:	f8c8 2000 	streq.w	r2, [r8]
 8007574:	605a      	strne	r2, [r3, #4]
 8007576:	e7eb      	b.n	8007550 <_malloc_r+0xa8>
 8007578:	4623      	mov	r3, r4
 800757a:	6864      	ldr	r4, [r4, #4]
 800757c:	e7ae      	b.n	80074dc <_malloc_r+0x34>
 800757e:	463c      	mov	r4, r7
 8007580:	687f      	ldr	r7, [r7, #4]
 8007582:	e7b6      	b.n	80074f2 <_malloc_r+0x4a>
 8007584:	461a      	mov	r2, r3
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	42a3      	cmp	r3, r4
 800758a:	d1fb      	bne.n	8007584 <_malloc_r+0xdc>
 800758c:	2300      	movs	r3, #0
 800758e:	6053      	str	r3, [r2, #4]
 8007590:	e7de      	b.n	8007550 <_malloc_r+0xa8>
 8007592:	230c      	movs	r3, #12
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	4630      	mov	r0, r6
 8007598:	f000 f80c 	bl	80075b4 <__malloc_unlock>
 800759c:	e794      	b.n	80074c8 <_malloc_r+0x20>
 800759e:	6005      	str	r5, [r0, #0]
 80075a0:	e7d6      	b.n	8007550 <_malloc_r+0xa8>
 80075a2:	bf00      	nop
 80075a4:	20001ea8 	.word	0x20001ea8

080075a8 <__malloc_lock>:
 80075a8:	4801      	ldr	r0, [pc, #4]	@ (80075b0 <__malloc_lock+0x8>)
 80075aa:	f7ff bf0f 	b.w	80073cc <__retarget_lock_acquire_recursive>
 80075ae:	bf00      	nop
 80075b0:	20001ea0 	.word	0x20001ea0

080075b4 <__malloc_unlock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__malloc_unlock+0x8>)
 80075b6:	f7ff bf0a 	b.w	80073ce <__retarget_lock_release_recursive>
 80075ba:	bf00      	nop
 80075bc:	20001ea0 	.word	0x20001ea0

080075c0 <__ssputs_r>:
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	688e      	ldr	r6, [r1, #8]
 80075c6:	461f      	mov	r7, r3
 80075c8:	42be      	cmp	r6, r7
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	4682      	mov	sl, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	4690      	mov	r8, r2
 80075d2:	d82d      	bhi.n	8007630 <__ssputs_r+0x70>
 80075d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075dc:	d026      	beq.n	800762c <__ssputs_r+0x6c>
 80075de:	6965      	ldr	r5, [r4, #20]
 80075e0:	6909      	ldr	r1, [r1, #16]
 80075e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075e6:	eba3 0901 	sub.w	r9, r3, r1
 80075ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075ee:	1c7b      	adds	r3, r7, #1
 80075f0:	444b      	add	r3, r9
 80075f2:	106d      	asrs	r5, r5, #1
 80075f4:	429d      	cmp	r5, r3
 80075f6:	bf38      	it	cc
 80075f8:	461d      	movcc	r5, r3
 80075fa:	0553      	lsls	r3, r2, #21
 80075fc:	d527      	bpl.n	800764e <__ssputs_r+0x8e>
 80075fe:	4629      	mov	r1, r5
 8007600:	f7ff ff52 	bl	80074a8 <_malloc_r>
 8007604:	4606      	mov	r6, r0
 8007606:	b360      	cbz	r0, 8007662 <__ssputs_r+0xa2>
 8007608:	6921      	ldr	r1, [r4, #16]
 800760a:	464a      	mov	r2, r9
 800760c:	f000 fae8 	bl	8007be0 <memcpy>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	6126      	str	r6, [r4, #16]
 800761e:	6165      	str	r5, [r4, #20]
 8007620:	444e      	add	r6, r9
 8007622:	eba5 0509 	sub.w	r5, r5, r9
 8007626:	6026      	str	r6, [r4, #0]
 8007628:	60a5      	str	r5, [r4, #8]
 800762a:	463e      	mov	r6, r7
 800762c:	42be      	cmp	r6, r7
 800762e:	d900      	bls.n	8007632 <__ssputs_r+0x72>
 8007630:	463e      	mov	r6, r7
 8007632:	6820      	ldr	r0, [r4, #0]
 8007634:	4632      	mov	r2, r6
 8007636:	4641      	mov	r1, r8
 8007638:	f000 faa8 	bl	8007b8c <memmove>
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	1b9b      	subs	r3, r3, r6
 8007640:	60a3      	str	r3, [r4, #8]
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	4433      	add	r3, r6
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	2000      	movs	r0, #0
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	462a      	mov	r2, r5
 8007650:	f000 fad4 	bl	8007bfc <_realloc_r>
 8007654:	4606      	mov	r6, r0
 8007656:	2800      	cmp	r0, #0
 8007658:	d1e0      	bne.n	800761c <__ssputs_r+0x5c>
 800765a:	6921      	ldr	r1, [r4, #16]
 800765c:	4650      	mov	r0, sl
 800765e:	f7ff feb7 	bl	80073d0 <_free_r>
 8007662:	230c      	movs	r3, #12
 8007664:	f8ca 3000 	str.w	r3, [sl]
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	e7e9      	b.n	800764a <__ssputs_r+0x8a>
	...

08007678 <_svfiprintf_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	4698      	mov	r8, r3
 800767e:	898b      	ldrh	r3, [r1, #12]
 8007680:	061b      	lsls	r3, r3, #24
 8007682:	b09d      	sub	sp, #116	@ 0x74
 8007684:	4607      	mov	r7, r0
 8007686:	460d      	mov	r5, r1
 8007688:	4614      	mov	r4, r2
 800768a:	d510      	bpl.n	80076ae <_svfiprintf_r+0x36>
 800768c:	690b      	ldr	r3, [r1, #16]
 800768e:	b973      	cbnz	r3, 80076ae <_svfiprintf_r+0x36>
 8007690:	2140      	movs	r1, #64	@ 0x40
 8007692:	f7ff ff09 	bl	80074a8 <_malloc_r>
 8007696:	6028      	str	r0, [r5, #0]
 8007698:	6128      	str	r0, [r5, #16]
 800769a:	b930      	cbnz	r0, 80076aa <_svfiprintf_r+0x32>
 800769c:	230c      	movs	r3, #12
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	b01d      	add	sp, #116	@ 0x74
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	2340      	movs	r3, #64	@ 0x40
 80076ac:	616b      	str	r3, [r5, #20]
 80076ae:	2300      	movs	r3, #0
 80076b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076b2:	2320      	movs	r3, #32
 80076b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076bc:	2330      	movs	r3, #48	@ 0x30
 80076be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800785c <_svfiprintf_r+0x1e4>
 80076c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c6:	f04f 0901 	mov.w	r9, #1
 80076ca:	4623      	mov	r3, r4
 80076cc:	469a      	mov	sl, r3
 80076ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d2:	b10a      	cbz	r2, 80076d8 <_svfiprintf_r+0x60>
 80076d4:	2a25      	cmp	r2, #37	@ 0x25
 80076d6:	d1f9      	bne.n	80076cc <_svfiprintf_r+0x54>
 80076d8:	ebba 0b04 	subs.w	fp, sl, r4
 80076dc:	d00b      	beq.n	80076f6 <_svfiprintf_r+0x7e>
 80076de:	465b      	mov	r3, fp
 80076e0:	4622      	mov	r2, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff ff6b 	bl	80075c0 <__ssputs_r>
 80076ea:	3001      	adds	r0, #1
 80076ec:	f000 80a7 	beq.w	800783e <_svfiprintf_r+0x1c6>
 80076f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f2:	445a      	add	r2, fp
 80076f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f6:	f89a 3000 	ldrb.w	r3, [sl]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 809f 	beq.w	800783e <_svfiprintf_r+0x1c6>
 8007700:	2300      	movs	r3, #0
 8007702:	f04f 32ff 	mov.w	r2, #4294967295
 8007706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800770a:	f10a 0a01 	add.w	sl, sl, #1
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007716:	931a      	str	r3, [sp, #104]	@ 0x68
 8007718:	4654      	mov	r4, sl
 800771a:	2205      	movs	r2, #5
 800771c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007720:	484e      	ldr	r0, [pc, #312]	@ (800785c <_svfiprintf_r+0x1e4>)
 8007722:	f7f8 fd75 	bl	8000210 <memchr>
 8007726:	9a04      	ldr	r2, [sp, #16]
 8007728:	b9d8      	cbnz	r0, 8007762 <_svfiprintf_r+0xea>
 800772a:	06d0      	lsls	r0, r2, #27
 800772c:	bf44      	itt	mi
 800772e:	2320      	movmi	r3, #32
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007734:	0711      	lsls	r1, r2, #28
 8007736:	bf44      	itt	mi
 8007738:	232b      	movmi	r3, #43	@ 0x2b
 800773a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773e:	f89a 3000 	ldrb.w	r3, [sl]
 8007742:	2b2a      	cmp	r3, #42	@ 0x2a
 8007744:	d015      	beq.n	8007772 <_svfiprintf_r+0xfa>
 8007746:	9a07      	ldr	r2, [sp, #28]
 8007748:	4654      	mov	r4, sl
 800774a:	2000      	movs	r0, #0
 800774c:	f04f 0c0a 	mov.w	ip, #10
 8007750:	4621      	mov	r1, r4
 8007752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007756:	3b30      	subs	r3, #48	@ 0x30
 8007758:	2b09      	cmp	r3, #9
 800775a:	d94b      	bls.n	80077f4 <_svfiprintf_r+0x17c>
 800775c:	b1b0      	cbz	r0, 800778c <_svfiprintf_r+0x114>
 800775e:	9207      	str	r2, [sp, #28]
 8007760:	e014      	b.n	800778c <_svfiprintf_r+0x114>
 8007762:	eba0 0308 	sub.w	r3, r0, r8
 8007766:	fa09 f303 	lsl.w	r3, r9, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	46a2      	mov	sl, r4
 8007770:	e7d2      	b.n	8007718 <_svfiprintf_r+0xa0>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	1d19      	adds	r1, r3, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	9103      	str	r1, [sp, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	bfbb      	ittet	lt
 800777e:	425b      	neglt	r3, r3
 8007780:	f042 0202 	orrlt.w	r2, r2, #2
 8007784:	9307      	strge	r3, [sp, #28]
 8007786:	9307      	strlt	r3, [sp, #28]
 8007788:	bfb8      	it	lt
 800778a:	9204      	strlt	r2, [sp, #16]
 800778c:	7823      	ldrb	r3, [r4, #0]
 800778e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007790:	d10a      	bne.n	80077a8 <_svfiprintf_r+0x130>
 8007792:	7863      	ldrb	r3, [r4, #1]
 8007794:	2b2a      	cmp	r3, #42	@ 0x2a
 8007796:	d132      	bne.n	80077fe <_svfiprintf_r+0x186>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	9203      	str	r2, [sp, #12]
 80077a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a4:	3402      	adds	r4, #2
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800786c <_svfiprintf_r+0x1f4>
 80077ac:	7821      	ldrb	r1, [r4, #0]
 80077ae:	2203      	movs	r2, #3
 80077b0:	4650      	mov	r0, sl
 80077b2:	f7f8 fd2d 	bl	8000210 <memchr>
 80077b6:	b138      	cbz	r0, 80077c8 <_svfiprintf_r+0x150>
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	eba0 000a 	sub.w	r0, r0, sl
 80077be:	2240      	movs	r2, #64	@ 0x40
 80077c0:	4082      	lsls	r2, r0
 80077c2:	4313      	orrs	r3, r2
 80077c4:	3401      	adds	r4, #1
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077cc:	4824      	ldr	r0, [pc, #144]	@ (8007860 <_svfiprintf_r+0x1e8>)
 80077ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077d2:	2206      	movs	r2, #6
 80077d4:	f7f8 fd1c 	bl	8000210 <memchr>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d036      	beq.n	800784a <_svfiprintf_r+0x1d2>
 80077dc:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <_svfiprintf_r+0x1ec>)
 80077de:	bb1b      	cbnz	r3, 8007828 <_svfiprintf_r+0x1b0>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	3307      	adds	r3, #7
 80077e4:	f023 0307 	bic.w	r3, r3, #7
 80077e8:	3308      	adds	r3, #8
 80077ea:	9303      	str	r3, [sp, #12]
 80077ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ee:	4433      	add	r3, r6
 80077f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f2:	e76a      	b.n	80076ca <_svfiprintf_r+0x52>
 80077f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f8:	460c      	mov	r4, r1
 80077fa:	2001      	movs	r0, #1
 80077fc:	e7a8      	b.n	8007750 <_svfiprintf_r+0xd8>
 80077fe:	2300      	movs	r3, #0
 8007800:	3401      	adds	r4, #1
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	4619      	mov	r1, r3
 8007806:	f04f 0c0a 	mov.w	ip, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007810:	3a30      	subs	r2, #48	@ 0x30
 8007812:	2a09      	cmp	r2, #9
 8007814:	d903      	bls.n	800781e <_svfiprintf_r+0x1a6>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0c6      	beq.n	80077a8 <_svfiprintf_r+0x130>
 800781a:	9105      	str	r1, [sp, #20]
 800781c:	e7c4      	b.n	80077a8 <_svfiprintf_r+0x130>
 800781e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007822:	4604      	mov	r4, r0
 8007824:	2301      	movs	r3, #1
 8007826:	e7f0      	b.n	800780a <_svfiprintf_r+0x192>
 8007828:	ab03      	add	r3, sp, #12
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	462a      	mov	r2, r5
 800782e:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <_svfiprintf_r+0x1f0>)
 8007830:	a904      	add	r1, sp, #16
 8007832:	4638      	mov	r0, r7
 8007834:	f3af 8000 	nop.w
 8007838:	1c42      	adds	r2, r0, #1
 800783a:	4606      	mov	r6, r0
 800783c:	d1d6      	bne.n	80077ec <_svfiprintf_r+0x174>
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	065b      	lsls	r3, r3, #25
 8007842:	f53f af2d 	bmi.w	80076a0 <_svfiprintf_r+0x28>
 8007846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007848:	e72c      	b.n	80076a4 <_svfiprintf_r+0x2c>
 800784a:	ab03      	add	r3, sp, #12
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	462a      	mov	r2, r5
 8007850:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <_svfiprintf_r+0x1f0>)
 8007852:	a904      	add	r1, sp, #16
 8007854:	4638      	mov	r0, r7
 8007856:	f000 f879 	bl	800794c <_printf_i>
 800785a:	e7ed      	b.n	8007838 <_svfiprintf_r+0x1c0>
 800785c:	08007ce8 	.word	0x08007ce8
 8007860:	08007cf2 	.word	0x08007cf2
 8007864:	00000000 	.word	0x00000000
 8007868:	080075c1 	.word	0x080075c1
 800786c:	08007cee 	.word	0x08007cee

08007870 <_printf_common>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	4616      	mov	r6, r2
 8007876:	4698      	mov	r8, r3
 8007878:	688a      	ldr	r2, [r1, #8]
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007880:	4293      	cmp	r3, r2
 8007882:	bfb8      	it	lt
 8007884:	4613      	movlt	r3, r2
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800788c:	4607      	mov	r7, r0
 800788e:	460c      	mov	r4, r1
 8007890:	b10a      	cbz	r2, 8007896 <_printf_common+0x26>
 8007892:	3301      	adds	r3, #1
 8007894:	6033      	str	r3, [r6, #0]
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	0699      	lsls	r1, r3, #26
 800789a:	bf42      	ittt	mi
 800789c:	6833      	ldrmi	r3, [r6, #0]
 800789e:	3302      	addmi	r3, #2
 80078a0:	6033      	strmi	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	f015 0506 	ands.w	r5, r5, #6
 80078a8:	d106      	bne.n	80078b8 <_printf_common+0x48>
 80078aa:	f104 0a19 	add.w	sl, r4, #25
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	6832      	ldr	r2, [r6, #0]
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dc26      	bgt.n	8007906 <_printf_common+0x96>
 80078b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078bc:	6822      	ldr	r2, [r4, #0]
 80078be:	3b00      	subs	r3, #0
 80078c0:	bf18      	it	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	0692      	lsls	r2, r2, #26
 80078c6:	d42b      	bmi.n	8007920 <_printf_common+0xb0>
 80078c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078cc:	4641      	mov	r1, r8
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c8      	blx	r9
 80078d2:	3001      	adds	r0, #1
 80078d4:	d01e      	beq.n	8007914 <_printf_common+0xa4>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	f003 0306 	and.w	r3, r3, #6
 80078de:	2b04      	cmp	r3, #4
 80078e0:	bf02      	ittt	eq
 80078e2:	68e5      	ldreq	r5, [r4, #12]
 80078e4:	6833      	ldreq	r3, [r6, #0]
 80078e6:	1aed      	subeq	r5, r5, r3
 80078e8:	68a3      	ldr	r3, [r4, #8]
 80078ea:	bf0c      	ite	eq
 80078ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f0:	2500      	movne	r5, #0
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bfc4      	itt	gt
 80078f6:	1a9b      	subgt	r3, r3, r2
 80078f8:	18ed      	addgt	r5, r5, r3
 80078fa:	2600      	movs	r6, #0
 80078fc:	341a      	adds	r4, #26
 80078fe:	42b5      	cmp	r5, r6
 8007900:	d11a      	bne.n	8007938 <_printf_common+0xc8>
 8007902:	2000      	movs	r0, #0
 8007904:	e008      	b.n	8007918 <_printf_common+0xa8>
 8007906:	2301      	movs	r3, #1
 8007908:	4652      	mov	r2, sl
 800790a:	4641      	mov	r1, r8
 800790c:	4638      	mov	r0, r7
 800790e:	47c8      	blx	r9
 8007910:	3001      	adds	r0, #1
 8007912:	d103      	bne.n	800791c <_printf_common+0xac>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791c:	3501      	adds	r5, #1
 800791e:	e7c6      	b.n	80078ae <_printf_common+0x3e>
 8007920:	18e1      	adds	r1, r4, r3
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	2030      	movs	r0, #48	@ 0x30
 8007926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800792a:	4422      	add	r2, r4
 800792c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007934:	3302      	adds	r3, #2
 8007936:	e7c7      	b.n	80078c8 <_printf_common+0x58>
 8007938:	2301      	movs	r3, #1
 800793a:	4622      	mov	r2, r4
 800793c:	4641      	mov	r1, r8
 800793e:	4638      	mov	r0, r7
 8007940:	47c8      	blx	r9
 8007942:	3001      	adds	r0, #1
 8007944:	d0e6      	beq.n	8007914 <_printf_common+0xa4>
 8007946:	3601      	adds	r6, #1
 8007948:	e7d9      	b.n	80078fe <_printf_common+0x8e>
	...

0800794c <_printf_i>:
 800794c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	7e0f      	ldrb	r7, [r1, #24]
 8007952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007954:	2f78      	cmp	r7, #120	@ 0x78
 8007956:	4691      	mov	r9, r2
 8007958:	4680      	mov	r8, r0
 800795a:	460c      	mov	r4, r1
 800795c:	469a      	mov	sl, r3
 800795e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007962:	d807      	bhi.n	8007974 <_printf_i+0x28>
 8007964:	2f62      	cmp	r7, #98	@ 0x62
 8007966:	d80a      	bhi.n	800797e <_printf_i+0x32>
 8007968:	2f00      	cmp	r7, #0
 800796a:	f000 80d2 	beq.w	8007b12 <_printf_i+0x1c6>
 800796e:	2f58      	cmp	r7, #88	@ 0x58
 8007970:	f000 80b9 	beq.w	8007ae6 <_printf_i+0x19a>
 8007974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800797c:	e03a      	b.n	80079f4 <_printf_i+0xa8>
 800797e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007982:	2b15      	cmp	r3, #21
 8007984:	d8f6      	bhi.n	8007974 <_printf_i+0x28>
 8007986:	a101      	add	r1, pc, #4	@ (adr r1, 800798c <_printf_i+0x40>)
 8007988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079f9 	.word	0x080079f9
 8007994:	08007975 	.word	0x08007975
 8007998:	08007975 	.word	0x08007975
 800799c:	08007975 	.word	0x08007975
 80079a0:	08007975 	.word	0x08007975
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	08007975 	.word	0x08007975
 80079ac:	08007975 	.word	0x08007975
 80079b0:	08007975 	.word	0x08007975
 80079b4:	08007975 	.word	0x08007975
 80079b8:	08007af9 	.word	0x08007af9
 80079bc:	08007a23 	.word	0x08007a23
 80079c0:	08007ab3 	.word	0x08007ab3
 80079c4:	08007975 	.word	0x08007975
 80079c8:	08007975 	.word	0x08007975
 80079cc:	08007b1b 	.word	0x08007b1b
 80079d0:	08007975 	.word	0x08007975
 80079d4:	08007a23 	.word	0x08007a23
 80079d8:	08007975 	.word	0x08007975
 80079dc:	08007975 	.word	0x08007975
 80079e0:	08007abb 	.word	0x08007abb
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6032      	str	r2, [r6, #0]
 80079ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079f4:	2301      	movs	r3, #1
 80079f6:	e09d      	b.n	8007b34 <_printf_i+0x1e8>
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	6820      	ldr	r0, [r4, #0]
 80079fc:	1d19      	adds	r1, r3, #4
 80079fe:	6031      	str	r1, [r6, #0]
 8007a00:	0606      	lsls	r6, r0, #24
 8007a02:	d501      	bpl.n	8007a08 <_printf_i+0xbc>
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	e003      	b.n	8007a10 <_printf_i+0xc4>
 8007a08:	0645      	lsls	r5, r0, #25
 8007a0a:	d5fb      	bpl.n	8007a04 <_printf_i+0xb8>
 8007a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	da03      	bge.n	8007a1c <_printf_i+0xd0>
 8007a14:	232d      	movs	r3, #45	@ 0x2d
 8007a16:	426d      	negs	r5, r5
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a1c:	4859      	ldr	r0, [pc, #356]	@ (8007b84 <_printf_i+0x238>)
 8007a1e:	230a      	movs	r3, #10
 8007a20:	e011      	b.n	8007a46 <_printf_i+0xfa>
 8007a22:	6821      	ldr	r1, [r4, #0]
 8007a24:	6833      	ldr	r3, [r6, #0]
 8007a26:	0608      	lsls	r0, r1, #24
 8007a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a2c:	d402      	bmi.n	8007a34 <_printf_i+0xe8>
 8007a2e:	0649      	lsls	r1, r1, #25
 8007a30:	bf48      	it	mi
 8007a32:	b2ad      	uxthmi	r5, r5
 8007a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a36:	4853      	ldr	r0, [pc, #332]	@ (8007b84 <_printf_i+0x238>)
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	bf14      	ite	ne
 8007a3c:	230a      	movne	r3, #10
 8007a3e:	2308      	moveq	r3, #8
 8007a40:	2100      	movs	r1, #0
 8007a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a46:	6866      	ldr	r6, [r4, #4]
 8007a48:	60a6      	str	r6, [r4, #8]
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	bfa2      	ittt	ge
 8007a4e:	6821      	ldrge	r1, [r4, #0]
 8007a50:	f021 0104 	bicge.w	r1, r1, #4
 8007a54:	6021      	strge	r1, [r4, #0]
 8007a56:	b90d      	cbnz	r5, 8007a5c <_printf_i+0x110>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	d04b      	beq.n	8007af4 <_printf_i+0x1a8>
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a62:	fb03 5711 	mls	r7, r3, r1, r5
 8007a66:	5dc7      	ldrb	r7, [r0, r7]
 8007a68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a6c:	462f      	mov	r7, r5
 8007a6e:	42bb      	cmp	r3, r7
 8007a70:	460d      	mov	r5, r1
 8007a72:	d9f4      	bls.n	8007a5e <_printf_i+0x112>
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d10b      	bne.n	8007a90 <_printf_i+0x144>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	07df      	lsls	r7, r3, #31
 8007a7c:	d508      	bpl.n	8007a90 <_printf_i+0x144>
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6861      	ldr	r1, [r4, #4]
 8007a82:	4299      	cmp	r1, r3
 8007a84:	bfde      	ittt	le
 8007a86:	2330      	movle	r3, #48	@ 0x30
 8007a88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a90:	1b92      	subs	r2, r2, r6
 8007a92:	6122      	str	r2, [r4, #16]
 8007a94:	f8cd a000 	str.w	sl, [sp]
 8007a98:	464b      	mov	r3, r9
 8007a9a:	aa03      	add	r2, sp, #12
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f7ff fee6 	bl	8007870 <_printf_common>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d14a      	bne.n	8007b3e <_printf_i+0x1f2>
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aac:	b004      	add	sp, #16
 8007aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	4833      	ldr	r0, [pc, #204]	@ (8007b88 <_printf_i+0x23c>)
 8007abc:	2778      	movs	r7, #120	@ 0x78
 8007abe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6831      	ldr	r1, [r6, #0]
 8007ac6:	061f      	lsls	r7, r3, #24
 8007ac8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007acc:	d402      	bmi.n	8007ad4 <_printf_i+0x188>
 8007ace:	065f      	lsls	r7, r3, #25
 8007ad0:	bf48      	it	mi
 8007ad2:	b2ad      	uxthmi	r5, r5
 8007ad4:	6031      	str	r1, [r6, #0]
 8007ad6:	07d9      	lsls	r1, r3, #31
 8007ad8:	bf44      	itt	mi
 8007ada:	f043 0320 	orrmi.w	r3, r3, #32
 8007ade:	6023      	strmi	r3, [r4, #0]
 8007ae0:	b11d      	cbz	r5, 8007aea <_printf_i+0x19e>
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	e7ac      	b.n	8007a40 <_printf_i+0xf4>
 8007ae6:	4827      	ldr	r0, [pc, #156]	@ (8007b84 <_printf_i+0x238>)
 8007ae8:	e7e9      	b.n	8007abe <_printf_i+0x172>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f023 0320 	bic.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	e7f6      	b.n	8007ae2 <_printf_i+0x196>
 8007af4:	4616      	mov	r6, r2
 8007af6:	e7bd      	b.n	8007a74 <_printf_i+0x128>
 8007af8:	6833      	ldr	r3, [r6, #0]
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	6961      	ldr	r1, [r4, #20]
 8007afe:	1d18      	adds	r0, r3, #4
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	062e      	lsls	r6, r5, #24
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0x1c0>
 8007b08:	6019      	str	r1, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0x1c6>
 8007b0c:	0668      	lsls	r0, r5, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0x1bc>
 8007b10:	8019      	strh	r1, [r3, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	4616      	mov	r6, r2
 8007b18:	e7bc      	b.n	8007a94 <_printf_i+0x148>
 8007b1a:	6833      	ldr	r3, [r6, #0]
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	6032      	str	r2, [r6, #0]
 8007b20:	681e      	ldr	r6, [r3, #0]
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	2100      	movs	r1, #0
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7f8 fb72 	bl	8000210 <memchr>
 8007b2c:	b108      	cbz	r0, 8007b32 <_printf_i+0x1e6>
 8007b2e:	1b80      	subs	r0, r0, r6
 8007b30:	6060      	str	r0, [r4, #4]
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	2300      	movs	r3, #0
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b3c:	e7aa      	b.n	8007a94 <_printf_i+0x148>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	4632      	mov	r2, r6
 8007b42:	4649      	mov	r1, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	47d0      	blx	sl
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d0ad      	beq.n	8007aa8 <_printf_i+0x15c>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	079b      	lsls	r3, r3, #30
 8007b50:	d413      	bmi.n	8007b7a <_printf_i+0x22e>
 8007b52:	68e0      	ldr	r0, [r4, #12]
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	4298      	cmp	r0, r3
 8007b58:	bfb8      	it	lt
 8007b5a:	4618      	movlt	r0, r3
 8007b5c:	e7a6      	b.n	8007aac <_printf_i+0x160>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4632      	mov	r2, r6
 8007b62:	4649      	mov	r1, r9
 8007b64:	4640      	mov	r0, r8
 8007b66:	47d0      	blx	sl
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d09d      	beq.n	8007aa8 <_printf_i+0x15c>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	9903      	ldr	r1, [sp, #12]
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dcf2      	bgt.n	8007b5e <_printf_i+0x212>
 8007b78:	e7eb      	b.n	8007b52 <_printf_i+0x206>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	f104 0619 	add.w	r6, r4, #25
 8007b80:	e7f5      	b.n	8007b6e <_printf_i+0x222>
 8007b82:	bf00      	nop
 8007b84:	08007cf9 	.word	0x08007cf9
 8007b88:	08007d0a 	.word	0x08007d0a

08007b8c <memmove>:
 8007b8c:	4288      	cmp	r0, r1
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	eb01 0402 	add.w	r4, r1, r2
 8007b94:	d902      	bls.n	8007b9c <memmove+0x10>
 8007b96:	4284      	cmp	r4, r0
 8007b98:	4623      	mov	r3, r4
 8007b9a:	d807      	bhi.n	8007bac <memmove+0x20>
 8007b9c:	1e43      	subs	r3, r0, #1
 8007b9e:	42a1      	cmp	r1, r4
 8007ba0:	d008      	beq.n	8007bb4 <memmove+0x28>
 8007ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007baa:	e7f8      	b.n	8007b9e <memmove+0x12>
 8007bac:	4402      	add	r2, r0
 8007bae:	4601      	mov	r1, r0
 8007bb0:	428a      	cmp	r2, r1
 8007bb2:	d100      	bne.n	8007bb6 <memmove+0x2a>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bbe:	e7f7      	b.n	8007bb0 <memmove+0x24>

08007bc0 <_sbrk_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d06      	ldr	r5, [pc, #24]	@ (8007bdc <_sbrk_r+0x1c>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	f7f8 fe56 	bl	800087c <_sbrk>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_sbrk_r+0x1a>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_sbrk_r+0x1a>
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	20001e9c 	.word	0x20001e9c

08007be0 <memcpy>:
 8007be0:	440a      	add	r2, r1
 8007be2:	4291      	cmp	r1, r2
 8007be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be8:	d100      	bne.n	8007bec <memcpy+0xc>
 8007bea:	4770      	bx	lr
 8007bec:	b510      	push	{r4, lr}
 8007bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	d1f9      	bne.n	8007bee <memcpy+0xe>
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <_realloc_r>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	4680      	mov	r8, r0
 8007c02:	4615      	mov	r5, r2
 8007c04:	460c      	mov	r4, r1
 8007c06:	b921      	cbnz	r1, 8007c12 <_realloc_r+0x16>
 8007c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	f7ff bc4b 	b.w	80074a8 <_malloc_r>
 8007c12:	b92a      	cbnz	r2, 8007c20 <_realloc_r+0x24>
 8007c14:	f7ff fbdc 	bl	80073d0 <_free_r>
 8007c18:	2400      	movs	r4, #0
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	f000 f81a 	bl	8007c58 <_malloc_usable_size_r>
 8007c24:	4285      	cmp	r5, r0
 8007c26:	4606      	mov	r6, r0
 8007c28:	d802      	bhi.n	8007c30 <_realloc_r+0x34>
 8007c2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c2e:	d8f4      	bhi.n	8007c1a <_realloc_r+0x1e>
 8007c30:	4629      	mov	r1, r5
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7ff fc38 	bl	80074a8 <_malloc_r>
 8007c38:	4607      	mov	r7, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0ec      	beq.n	8007c18 <_realloc_r+0x1c>
 8007c3e:	42b5      	cmp	r5, r6
 8007c40:	462a      	mov	r2, r5
 8007c42:	4621      	mov	r1, r4
 8007c44:	bf28      	it	cs
 8007c46:	4632      	movcs	r2, r6
 8007c48:	f7ff ffca 	bl	8007be0 <memcpy>
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f7ff fbbe 	bl	80073d0 <_free_r>
 8007c54:	463c      	mov	r4, r7
 8007c56:	e7e0      	b.n	8007c1a <_realloc_r+0x1e>

08007c58 <_malloc_usable_size_r>:
 8007c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5c:	1f18      	subs	r0, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbc      	itt	lt
 8007c62:	580b      	ldrlt	r3, [r1, r0]
 8007c64:	18c0      	addlt	r0, r0, r3
 8007c66:	4770      	bx	lr

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
